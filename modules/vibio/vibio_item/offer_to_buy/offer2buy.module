<?php
define("OFFER2BUY_MAX_PRICE", 1000000);
define("OFFER2BUY_MAX_COMMENT_LENGTH", 255);

function offer2buy_perm()
{
	return array(
		"offer2buy offer",
		"offer2buy admin",
	);
}

function offer2buy_menu()
{
	return array(
		"offer2buy/ajax/offer/%"	=> array(
			"page callback"		=> "offer2buy_ajax_offer",
			"page arguments"	=> array(3),
			"file"				=> "offer2buy.ajax.php",
			"access arguments"	=> array("offer2buy offer"),
			"type"				=> MENU_CALLBACK,
		),
		"admin/settings/offer2buy"	=> array(
			"title"				=> "Offer2Buy",
			"description"		=> t("Control offer2buy email messages"),
			"page callback"		=> "drupal_get_form",
			"page arguments"	=> array("offer2buy_admin"),
			"access arguments"	=> array("offer2buy admin"),
			"file"				=> "offer2buy.forms.php",
			"type"				=> MENU_NORMAL_ITEM,
		),
	);
}

function offer2buy_form_vibio_item_node_form_alter(&$form, &$state)
{
	$nid = $form['nid']['#value'];
	$settings = offer2buy_get_settings($nid);
	
	$form['offer2buy'] = array(
		"#type"				=> "fieldset",
		"#title"			=> t("Offer to Buy Settings"),
		"#description"		=> t('These options only affect your posting if this item is set to type "selling"'),
		"#collapsible"		=> true,
		"#collapsed"		=> false,
		"#weight"			=> -8,
		"o2b_price"				=> array(
			"#type"			=> "textfield",
			"#title"		=> t("Price"),
			"#description"	=> t("The listing price for this item (in USD)"),
			"#default_value"=> $settings['price'],
			"#size"			=> 8,
		),
		"o2b_is_negotiable"		=> array(
			"#type"			=> "checkbox",
			"#title"		=> t("Price is Negotiable"),
			"#description"	=> t("This determines whether or not you want to allow other users to offer more or less for the item."),
			"#default_value"=> $settings['is_negotiable'],
		),
		"o2b_allow_offer_views"	=> array(
			"#type"			=> "checkbox",
			"#title"		=> t("Allow Offer Views"),
			"#description"	=> t("Should people viewing your item be able to see the offers on the item?"),
			"#default_value"=> $settings['allow_offer_views'],
		),
		"o2b_nid"	=> array(
			"#type"	=> "value",
			"#value"=> $nid,
		),
	);
	
	$form['#validate'][] = "_offer2buy_node_validate";
	$form['#submit'][] = "_offer2buy_node_submit";
}

function _offer2buy_node_validate($form, &$state)
{
	if (!_offer2buy_valid_price($state['values']['o2b_price']))
	{
		form_set_error("o2b_price", t("Invalid price definition."));
	}
}

function _offer2buy_node_submit($form, &$state)
{
	$vals = $state['values'];
	$price = number_format($vals['o2b_price'], 2);
	
	$_SESSION['o2b_settings'] = array(
		"price"				=> $price,
		"is_negotiable"		=> $vals['o2b_is_negotiable'],
		"allow_offer_views"	=> $vals['o2b_allow_offer_views'],
	);
}

function offer2buy_nodeapi(&$node, $op, $a3=null, $a4=null)
{
	if ($node->type == "vibio_item")
	{
		switch ($op)
		{
			case "load":
				global $user;
				
				$sql = "SELECT *
						FROM {offer2buy}
						WHERE `nid`=%d";
				$settings = db_fetch_array(db_query($sql, $node->nid));
				
				if ($node->uid == $user->uid || $settings['allow_offer_views'])
				{
					$sql = "SELECT o.*, u.`name`
							FROM {offer2buy_offers} o JOIN {users} u
								ON o.`uid`=u.`uid`
							WHERE `nid`=%d
							ORDER BY `offer` DESC, `timestamp` ASC";
					$res = db_query($sql, $node->nid);
					
					$offers = array();
					while ($row = db_fetch_array($res))
					{
						$offers[] = $row;
					}
				}
				
				return array(
					"offer2buy"	=> array(
						"settings"	=> $settings,
						"offers"	=> $offers,
					),
				);
				
				break;
			case "update":
			case "insert":
				if (!empty($_SESSION['o2b_settings']))
				{
					$vals = $_SESSION['o2b_settings'];
					$sql = "REPLACE INTO {offer2buy}
							SET `nid`=%d, `price`=%f, `is_negotiable`=%d, `allow_offer_views`=%d";
					db_query($sql, $node->nid, $vals['price'], $vals['is_negotiable'], $vals['allow_offer_views']);
					unset($_SESSION['o2b_settings']);
				}
				break;
			default:
				break;
		}
	}
}

function offer2buy_theme(&$existing, $type, $theme, $path)
{
	return array(
		"offer2buy_init"		=> array(
			"arguments"	=> array("nid" => false),
			"template"	=> "templates/offer2buy/init",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
		"offer2buy_offer_list"	=> array(
			"arguments"	=> array("offers" => array(), "is_owner" => false),
			"template"	=> "templates/offer2buy/list",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
		"offer2buy_offer"		=> array(
			"arguments"	=> array("offer" => array(), "is_owner" => false),
			"template"	=> "templates/offer2buy/offer",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
	);
}

function offer2buy_get_settings($nid=false)
{
	if (!$nid)
	{
		return false;
	}
	
	$sql = "SELECT *
			FROM {offer2buy}
			WHERE `nid`=%d";
	return db_fetch_array(db_query($sql, $nid));
}

function offer2buy_preprocess_node(&$vars)
{
	if (!$vars['teaser'] && $vars['node']->type == "vibio_item")
	{
		drupal_add_css("sites/all/themes/vibio/css/offer2buy.css");
		drupal_add_js("sites/all/themes/vibio/js/offer2buy.js");
	}
}

function offer2buy_get_offer($uid, $nid)
{
	$sql = "SELECT *
			FROM {offer2buy_offers}
			WHERE `uid`=%d
				AND `nid`=%d";
	return db_fetch_array(db_query($sql, $uid, $nid));
}

function offer2buy_offer_form(&$state, $nid, $referrer)
{
	global $user;
	
	$settings = offer2buy_get_settings($nid);
	$current_offer = offer2buy_get_offer($user->uid, $nid);
	
	$form = array(
		"uid"		=> array(
			"#type"	=> "value",
			"#value"=> $user->uid,
		),
		"nid"		=> array(
			"#type"	=> "value",
			"#value"=> $nid,
		),
		"destination"	=> array(
			"#type"	=> "value",
			"#value"=> empty($_GET['destination']) ? request_uri() : $_GET['destination'],
		),
		"offer"		=> array(
			"#type"			=> "textfield",
			"#title"		=> t("Offer"),
			"#default_value"=> $current_offer ? $current_offer['offer'] : $settings['price'],
		),
		"comment"	=> array(
			"#type"			=> "textarea",
			"#title"		=> t("Comment"),
			"#description"	=> t("A comment that the seller will see when reviewing offers for this item."),
			"#default_value"=> $current_offer['comment'],
		),
		"submit"	=> array(
			"#type"	=> "submit",
			"#value"=> t("Offer"),
		),
	);
	
	if (!$settings['is_negotiable'])
	{
		$form['offer']['#attributes'] = array(
			"readonly"	=> "readonly",
		);
	}
	
	if ($current_offer)
	{
		$form['#prefix'] = t("You already have a pending offer on this item. The details of that offer are shown below. Any edits will replace your original offer.");
	}
	
	return $form;
}

function offer2buy_offer_form_validate($form, &$state)
{
	$vals = $state['values'];
	$error = false;
	
	if (!_offer2buy_valid_price($vals['offer']))
	{
		form_set_error("offer", t("Invalid offer amount"));
		$error = true;
	}
	elseif (strlen($vals['comment']) > OFFER2BUY_MAX_COMMENT_LENGTH)
	{
		form_set_error("comment", t("Comment cannot exceed !limit characters", array("!limit" => OFFER2BUY_MAX_COMMENT_LENGTH)));
		$error = true;
	}
	
	if ($error)
	{
		drupal_goto($vals['destination']);
	}
}

function offer2buy_offer_form_submit($form, &$state)
{
	$vals = $state['values'];
	$offer = number_format($vals['offer'], 2);
	
	$sql = "REPLACE INTO {offer2buy_offers}
			SET `nid`=%d, `uid`=%d, `offer`=%f, `timestamp`=%d, `comment`='%s'";
	db_query($sql, $vals['nid'], $vals['uid'], $offer, time(), $vals['comment']);
	
	$node = node_load($vals['nid']);
	$offerer = user_load($vals['uid']);
	$item_owner = user_load($node->uid);
	$offer = array(
		"comment"	=> $vals['comment'],
		"amount"	=> $offer,
	);
	
	module_invoke_all("offer2buy_make_offer", $node, $offerer, $item_owner, $offer);
	
	drupal_set_message(t("Your offer has been sent to !user", array("!user" => $item_owner->name)));
	drupal_goto($vals['destination']);
}

function offer2buy_offer2buy_make_offer($node, $offerer, $owner, $offer)
{
	global $language;
	
	$params = array(
		"offerer"	=> $offerer,
		"owner"		=> $owner,
		"offer"		=> $offer,
		"item"		=> $node,
	);
	
	drupal_mail("offer2buy", "offer_make", $owner->mail, $language, $params);
	drupal_mail("offer2buy", "offer_make_confirm", $offerer->mail, $language, $params);
}

function offer2buy_offerbuy_accept_offer($node, $offerer, $owner, $offer)
{
	$params = array(
		"item"		=> $node,
		"offerer"	=> $offerer,
		"owner"		=> $owner,
		"offer"		=> $offer,
	);
	
	drupal_mail("offer2buy", "offer_accept", $offerer->mail, $language, $params);
	drupal_mail("offer2buy", "offer_accept_confirm", $owner->mail, $language, $params);
}

function offer2buy_mail($key, &$message, $params)
{
	if ($key == "offer_make" && ($body = variable_get("offer2buy_offer_message", false)))
	{
		$message['subject'] = t("Offer on \"!title\" from !user", array("!title" => $params['item']->title, "!user" => $params['offerer']->name));
		$message['body'] = _offer2buy_replace($body, $params);
	}
	elseif ($key == "offer_make_confirm" && ($body = variable_get("offer2buy_offer_confirmation", false)))
	{
		$message['subject'] = t("Confirmation for offer to !user for item \"!item\"", array("!user" => $params['owner']->name, "!item" => $params['item']->title));
		$message['body'] = _offer2buy_replace($body, $params);
	}
	elseif ($key == "offer_accept" && ($body = variable_get("offer2buy_offer_accept", false)))
	{
		$message['subject'] = t("Offer accepted for \"!item\"!", array("!item" => $params['item']->title));
		$message['body'] = _offer2buy_replace($body, $params);
	}
	elseif ($key == "offer_accept_confirm" && ($body = variable_get("offer2buy_offer_accept_confirm", false)))
	{
		$message['subject'] = t("Offer acceptance confirmation: \$!offer from !offerer", array("!offer" => $params['offer']['amount'], "!offerer" => $params['offerer']->name));
		$message['body'] = _offer2buy_replace($body, $params);
	}
}

function _offer2buy_valid_price($price)
{
	if (!is_numeric($price))
	{
		return false;
	}
	
	$price = number_format($price, 2);
	return $price >= 0 && $price <= OFFER2BUY_MAX_PRICE;
}

function _offer2buy_replace($message, $params)
{
	$link_options = array(
		"absolute"	=> true,
	);
	
	$private_msg_subject = "{$params['item']->title}";
	
	$replacements = array(
		"!offerer_message_url"	=> url("messages/new/{$params['offerer']->uid}/$private_msg_subject", $link_options),
		"!owner_message_url"	=> url("messages/new/{$params['owner']->uid}/$private_msg_subject", $link_options),
		"!offerer"				=> l($params['offerer']->name, "user/{$params['offerer']->uid}", $link_options),
		"!owner"				=> l($params['owner']->name, "user/{$params['owner']->uid}", $link_options),
		"!item"					=> l($params['item']->title, "node/{$params['item']->nid}", $link_options),
		"!comment"				=> filter_xss($params['offer']['comment']),
		"!offer"				=> $params['offer']['amount'],
	);
	
	foreach ($replacements as $search => $replace)
	{
		$message = str_replace($search, $replace, $message);
	}
	
	return $message;
}

function offer2buy_forms($id, $args)
{
	if (strpos($id, "offer2buy_offer_accept_form_") !== false)
	{
		$forms[$id] = array(
			"callback"	=> "offer2buy_offer_accept_form",
		);
		
		return $forms;
	}
}

function offer2buy_offer_accept_form($state, $uid, $nid)
{
	return array(
		"uid"		=> array(
			"#type"	=> "value",
			"#value"=> $uid,
		),
		"nid"		=> array(
			"#type"	=> "value",
			"#value"=> $nid,
		),
		"submit"	=> array(
			"#type"	=> "submit",
			"#value"=> t("Accept Offer"),
		),
		"#submit"	=> array(
			"offer2buy_offer_accept_form_submit",
		),
	);
}

function offer2buy_offer_accept_form_submit($form, &$state)
{
	//TODO: we need to define the flow of what happens here. all we'll do is send a message right now.
	$vals = $state['values'];
	$node = node_load($vals['nid']);
	$offerer = user_load($vals['uid']);
	$owner = user_load($node->uid);
	
	$sql = "SELECT `offer` AS amount, `comment`
			FROM {offer2buy_offers}
			WHERE `uid`=%d
				AND `nid`=%d";
	$offer = db_fetch_array(db_query($sql, $offerer->uid, $node->nid));
	
	module_invoke_all("offerbuy_accept_offer", $node, $offerer, $owner, $offer);
}
?>