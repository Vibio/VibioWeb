<?php
function hbi_exit($destination=null)
{
	hbi_node_log_update();
}

function hbi_nodeapi(&$node, $op, $a3=null, $a4=null)
{
	if ($node->type != "vibio_item")
	{
		return;
	}
	
	switch ($op)
	{
		case "update":
			$u = user_load($node->uid);
			$args = array(
				"@username"		=> l($u->name, "user/{$u->uid}"),
				"@node_title"	=> l($node->title, "node/{$node->nid}"),
			);
			$params = array("heartbeat_edit_node", $node->uid, 0, $node->nid, 0, $args);
			
			hbi_node_log_update_queue($node->nid, $params, true);
			break;
	}
}

function hbi_views_api()
{
	return array(
		"api"	=> 3, // it was 2, now we're using 3.  What happens?
	);
}

function hbi_offer2buy_complete_actions($old_uid, $node)
{
	$u = user_load($node->uid);
	$args = array(
		"@user"	=> l($u->name, "user/{$u->uid}"),
		"@item"	=> l($node->title, "node/{$node->nid}"),
	);
	$params = array("heartbeat_buy_item", $node->uid, $old_uid, $node->nid, 0, $args);
	
	hbi_node_log_update_queue($node->nid, $params);
}

function hbi_user_relationships($op, &$relationship)
{
	switch ($op)
	{
		case "approve":
			_hbi_set_relationship($op, $relationship);
			break;
	}
}

function hbi_privacy_new_user($form, $account, $category)
{
	$hidden_messages = _hbi_hidden_messages();
	
	$sql = "SELECT `message_id`
			FROM {heartbeat_messages}";
	$res = db_query($sql);
	
	while ($row = db_fetch_array($res))
	{
		$message_id = $row['message_id'];
		
		if (!in_array($message_id, $hidden_messages))
		{
			privacy_set($account->uid, "heartbeat_messages", $message_id, PRIVACY_PUBLIC);
		}
	}
}

function hbi_collections_insert($collection)
{
	$u = user_load($collection['uid']);
	
	$args = array(
		"@user"			=> l($u->name, "user/{$u->uid}"),
		"@collection"	=> l($collection['title'], "collections/{$collection['cid']}"),
	);
	
	heartbeat_api_log("heartbeat_add_collection", $u->uid, 0, $collection['cid'], 0, $args);
}

function hbi_privacy_update_user($form, $user, $category)
{
	if ($category == "privacy_settings" && !empty($form['heartbeat_activity_settings']))
	{
		foreach ($form['heartbeat_activity_settings'] as $type_id => $access)
		{
			privacy_set($user->uid, "heartbeat_messages", $type_id, $access['access']);
		}
	}
}

function hbi_offer2buy_make_offer($node, $offerer, $owner, $offer)
{
	$variables = array(
		"@offerer"	=> l($offerer->name, "user/{$offerer->uid}"),
		"@item"		=> l($node->title, "node/{$node->nid}"),
	);
	
	heartbeat_api_log("make_offer_on_vibio_item", $offerer->uid, $owner->uid, $node->nid, 0, $variables);
}

function _hbi_set_relationship($op, &$relationship)
{
	$message_id = $op == "approve" ? "heartbeat_become_friends" : "heartbeat_cancel_friendship";
	$variables = array(
		"@user1" 		=> l($relationship->requestee->name, "user/".$relationship->requestee->uid),
		"@relation_type"=> $relationship->plural_name,
		"@user2"		=> l($relationship->requester->name, "user/".$relationship->requester->uid),
		"duplicate"		=> 1,
	);
	
	heartbeat_api_log($message_id, $relationship->requestee->uid, $relationship->requester->uid, 0, 0, $variables);
	
	$var_reverse = $variables;
	$var_reverse['@user1'] = $variables['@user2'];
	$var_reverse['@user2'] = $variables['@user1'];
	
	heartbeat_api_log($message_id, $relationship->requester->uid, $relationship->requestee->uid, 0, 0, $var_reverse);
}

function _hbi_hidden_messages()
{
	return array(
		"heartbeat_add_FL_OW_relation",
		"heartbeat_cancel_friendship",
		"heartbeat_edit_account",
		"heartbeat_edit_comment",
	);
}

function hbi_offer2buy_set_item_on_sale($nid)
{
	$node = node_load($nid);
	$u = user_load($node->uid);
	$args = array(
		"@user"	=> l($u->name, "user/{$u->uid}"),
		"@item"	=> l($node->title, "node/{$node->nid}"),
	);
	$params = array("heartbeat_item_on_sale", $node->uid, 0, $node->nid, 0, $args);
	hbi_node_log_update_queue($node->nid, $params);
}

function hbi_badge_give_badge($uid, $badge)
{
	$u = user_load($uid);
	$message_id = "heartbeat_give_badge";
	$variables = array(
		"@user"	=> l($u->name, "user/{$u->uid}"),
		"@badge"=> l($badge->title, "badge/{$badge->bid}/info", array("attributes" => array("class" => "badge_get_info"))),
	);
	
	heartbeat_api_log($message_id, $uid, 0, 0, 0, $variables);
}

/*
 the last_resort param should be used for messages that should only get logged only if there are no other messages
 for nid. This is useful for node updating, where the messages "X is selling Y", "X bought Y", etc can be used in place
 of generic "X has just updated Y"
*/
function hbi_node_log_update_queue($nid=false, $hb_message_params=array(), $last_resort=false, $clear=false)
{
	static $message_queue = array();
	
	if ($nid)
	{
		if ($clear)
		{
			$message_queue[$nid] = array();
		}
		
		$message_queue[$nid][] = array(
			"message"		=> $hb_message_params,
			"last_resort"	=> $last_resort,
		);
	}
	
	return $message_queue;
}

//should be called on exit
function hbi_node_log_update()
{
	foreach (hbi_node_log_update_queue() as $nid => $node_messages)
	{
		foreach ($node_messages as $message)
		{
			if ($message['last_resort'] && count($node_messages) > 1)
			{
				continue;
			}
			
			$md = $message['message'];
			heartbeat_api_log($md[0], $md[1], $md[2], $md[3], $md[4], $md[5]);
		}
	}
}
?>
