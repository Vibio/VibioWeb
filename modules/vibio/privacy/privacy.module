<?php
define("PRIVACY_ONLYME", 4);
define("PRIVACY_CONNECTION", 3);
define("PRIVACY_AUTHENTICATED", 2);
define("PRIVACY_PUBLIC", 1);

require_once("privacy.views.inc");

function privacy_perm()
{
	return array(
		"privacy admin", //some users should be able to see EVERYTHING
	);
}

function privacy_menu()
{
	$menu = array();
	
	if (module_exists("profile"))
	{
		$sql = "SELECT DISTINCT(`category`)
				FROM {profile_fields}";
		$res = db_query($sql);
		
		while ($row = db_fetch_array($res))
		{
			$category = _privacy_format_string($row['category'], true);
			
			$menu["user/%user/profile/$category"] = array(
				"title"				=> $row['category'],
				"page callback" 	=> "privacy_view_profile_category",
				"page arguments"	=> array(1, $row['category']),
				"access callback"	=> "privacy_access_profile",
				"access arguments"	=> array(1, _privacy_format_string($row['category'])),
				"type"				=> MENU_LOCAL_TASK,
			);
		}
	}
	
	return $menu;
}

function _privacy_get_profile_title($user, $category)
{
	return t("!user - !category", array("!user" => $user->name, "!category" => $category));
}

function privacy_access_profile($user, $category)
{
	$privacy_setting = privacy_get($user->uid, "profile", "profile_{$category}");
	return user_access("access user profiles") && privacy_get_access_level($user->uid) >= $privacy_setting;
}

function privacy_view_profile_category($user, $category)
{
	drupal_set_title(_privacy_get_profile_title($user, $category));
	
	$res = _profile_get_fields($category);
	$out = "";
	
	while ($row = db_fetch_array($res))
	{
		if (isset($user->$row['name']) && !empty($user->$row['name']))
		{
			$list = implode(", ", explode("\n", trim($user->$row['name'])));
			$out .= "<strong>{$row['title']}</strong>: {$list}<br />";
		}
	}
	
	return $out ? $out : t("User !user has no information for category !category", array("!user" => $user->name, "!category" => $category));
}

function privacy_user($op, &$edit, &$account, $category=null)
{
	switch ($op)
	{
		case "insert":
		case "update":
			module_invoke_all("privacy_update_user", $edit, $account, $category);
			break;
		case "delete":
			privacy_del_user($account->uid);
		default:
			break;
	}
}

function privacy_nodeapi(&$node, $op, $a3=null, $a4=null)
{
	if ($node->type == "vibio_item")
	{
		global $user;
		
		switch ($op)
		{
			case "delete":
				privacy_del($user->uid, "node", $node->nid);
				break;
			case "update":
			case "insert":
				if ($_SESSION['privacy_settings']['type'] == "node")
				{
					privacy_set($user->uid, $_SESSION['privacy_settings']['type'], $node->nid, $_SESSION['privacy_settings']['setting']);
					unset($_SESSION['privacy_settings']);
				}
				break;
			default:
				break;
		}
	}
}

function privacy_form_vibio_item_node_form_alter(&$form, &$state)
{
	$form = array_merge($form, _privacy_form());
}

function privacy_form_user_profile_form_alter(&$form, &$state)
{
	$category = _privacy_format_string($form['_category']['#value']);
	
	$profile_categories = array(
		"about_me",
		"demographics",
	);
	
	if ($category == "account")
	{
		if (empty($form['heartbeat_activity_settings_select']['heartbeat_activity_settings']))
		{
			return;
		}
		
		foreach ($form['heartbeat_activity_settings_select']['heartbeat_activity_settings'] as $type_id => $field)
		{
			if (!is_array($field))
			{
				continue;
			}
			
			$default = privacy_get($form['_account']['#value']->uid, "heartbeat_messages", $type_id);
			$field = $form['heartbeat_activity_settings_select']['heartbeat_activity_settings'][$type_id]['access'];
			$field['#options'] = _privacy_options();
			$field['#default_value'] = $default;
			$form['heartbeat_activity_settings_select']['heartbeat_activity_settings'][$type_id]['access'] = $field;
		}
	}
	elseif (in_array($category, $profile_categories))
	{
		$form_category = $form['_category']['#value'];
		$form[$form_category]['privacy_settings_fieldset'] = _privacy_fieldset($form['_account']['#value']->uid, "profile", "profile_{$category}");
		$form['#submit'][] = "_privacy_form_submit";
	}
}

function _privacy_fieldset($uid=false, $type="node", $type_id=false)
{
	$fieldset = array(
		"#title"		=> t("Privacy Settings"),
		"#description"	=> t("This setting controls who is allowed to see this information."),
		"#type"			=> "fieldset",
		"#collapsible"	=> false,
	);
	
	return array_merge($fieldset, _privacy_form($uid, $type, $type_id));
}

function _privacy_form($uid=false, $type="node", $type_id=false)
{
	return array(
		"privacy_setting"	=> array(
			"#title"		=> t("Privacy Settings"),
			"#type"			=> "select",
			"#options"		=> _privacy_options(),
			"#default_value"=> privacy_get($uid, $type, $type_id),
		),
		"privacy_type"		=> array(
			"#type"	=> "value",
			"#value"=> $type,
		),
		"privacy_uid"		=> array(
			"#type"	=> "value",
			"#value"=> $uid,
		),
		"privacy_typeid"	=> array(
			"#type"	=> "value",
			"#value"=> $type_id,
		),
		"#submit"			=> array(
			"_privacy_form_submit",
		),
	);
}

function _privacy_form_submit($form, &$state)
{
	$vals = $state['values'];
	if ($vals['privacy_uid'] && $vals['privacy_typeid']) //if set, then whatever it is must have already defined these values, so we have everything we need
	{
		privacy_set($vals['privacy_uid'], $vals['privacy_type'], $vals['privacy_typeid'], $vals['privacy_setting']);
	}
	else // if no uid, then something (like nodeapi), must get this data later
	{
		$_SESSION['privacy_settings'] = array(
			"type"		=> $vals['privacy_type'],
			"setting"	=> $vals['privacy_setting'],
		);
	}
}

function privacy_get($uid, $type, $type_id)
{
	if (!$uid || !$type || !$type_id)
	{
		return false;
	}
	
	$sql = "SELECT `setting`
			FROM {privacy_settings}
			WHERE `uid`=%d
				AND `type`='%s'
				AND `type_id`='%s'";
	return db_result(db_query($sql, $uid, $type, $type_id));
}

function privacy_set($uid, $type, $type_id, $setting)
{
	$sql = "REPLACE INTO {privacy_settings}
			SET `uid`=%d, `type`='%s', `type_id`='%s', `setting`=%d";
	db_query($sql, $uid, $type, $type_id, $setting);
}

function privacy_del($uid, $type, $type_id)
{
	$sql = "DELETE FROM {privacy_settings}
			WHERE `uid`=%d
				AND `type`='%s'
				AND `type_id`='%s'";
	db_query($sql, $uid, $type, $type_id);
}

function privacy_del_user($uid)
{
	$sql = "DELETE FROM {privacy_settings}
			WHERE `uid`=%d";
	db_query($sql, $uid);
}

function privacy_get_access_level($to_uid, $from_uid=null)
{
	static $privacy_access_levels = array();
	
	if ($from_uid == null)
	{
		global $user;
		$from_uid = $user->uid;
	}
	
	if (!$from_uid) //anonymous user
	{
		return PRIVACY_PUBLIC;
	}
	elseif ($from_uid == $to_uid)
	{
		return PRIVACY_ONLYME;
	}
	
	if (!$privacy_access_levels[$from_uid][$to_uid])
	{
		$network = network_get($from_uid, "default", 1);
		$privacy_access_levels[$from_uid][$to_uid] = array_key_exists($to_uid, $network) ? PRIVACY_CONNECTION : PRIVACY_AUTHENTICATED;
	}
	
	return $privacy_access_levels[$from_uid][$to_uid];
}

function _privacy_format_string($string, $for_url=false)
{
	$replacement = $for_url ? "-" : "_";
	return str_replace(array(" ", "-", "+", "_"), $replacement, strtolower($string));
}

function _privacy_options()
{
	return array(
		PRIVACY_ONLYME			=> t("Private to me"),
		PRIVACY_CONNECTION		=> t("Only my connections"),
		PRIVACY_AUTHENTICATED	=> t("Only users with Vibio accounts"),
		PRIVACY_PUBLIC			=> t("Anyone"),
	);
}
?>