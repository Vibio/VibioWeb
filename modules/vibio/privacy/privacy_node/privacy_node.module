<?php

//
//CONTROLLER/CRUD
//

/**
 * Controller for basic privacy CRUD actions with collection/vibio_item nodes.
 * 
 * @global <type> $user
 * @param <type> $node
 * @param <type> $op
 * @param <type> $a3
 * @param <type> $a4
 */
function privacy_node_nodeapi(&$node, $op, $a3=null, $a4=null){
  if ($node->type == "vibio_item" || $node->type == 'collection'){
		global $user;

		switch ($op){
			case "load":
				$node->privacy_setting = privacy_node_get($user->uid, "node", $node->nid);
				break;
			case "delete":
        privacy_node_delete($node->nid);
				break;
			case "update":
        //@todo: not sure about this case
        if($node->privacy_setting){
          privacy_node_update($node->nid, $node->privacy_setting);
        }
			case "insert":
        privacy_node_set($node->nid, $node->privacy_setting);
				break;
			default:
				break;
		}
	}
}

/**
 * Retrieves the access value associated with the given $nid.
 *
 * @param <type> $nid
 * @return int $access value for the given node
 */
function privacy_node_get($nid){
  return $access;
}

/**
 * Sets the $access value for a given $nid. If the node exists, will update
 * the $access value.
 *
 * @param int $nid
 * @param int $access
 */
function privacy_node_set($nid, $access){
  
}

/**
 * Deletes the privacy setting for $nid.
 * 
 * @param <type> $nid
 * @param <type> $access
 */
function privacy_node_delete($nid){

}

/**
 * Updates the $access value of an exisiting $nid.
 *
 * @param <type> $nid
 * @param <type> $access
 */
function privacy_node_update($nid, $access){

}

//
//PRESENTATION/UI
//

/**
 * Adds privacy settings to the product node form
 *
 * @param <type> $form
 * @param <type> $state
 * @return <type>
 */
function privacy_node_form_product_node_form_alter(&$form, &$state)
{
	if (module_exists("product") && !product_get_autoadd(false))
	{
		return;
	}

	if (!$form['#node']->nid)
	{
		privacy_node_form_vibio_item_node_form_alter($form, $state);
	}
}

/**
 * Adds privacy settings to the vibio_item node form
 *
 * @param <type> $form
 * @param <type> $state
 */
function privacy_node_form_vibio_item_node_form_alter(&$form, &$state)
{
	if ($form['#node']->nid)
	{
		$default_type = "node";
		$default_typeid = $form['#node']->nid;
	}
	else
	{
		$default_type = "account_setting";
		$default_typeid = "item_default";
	}

	$form = array_merge_recursive($form, _privacy_form($form['#node']->uid, $default_type, $default_typeid));
}

/**
 * Adds privacy settings to the collections edit form.
 *
 * @global  $user
 * @param <type> $form
 * @param <type> $state
 */
function privacy_node_form_collection_edit_alter(&$form, &$state)
{
	global $user;

	$form = array_merge_recursive($form, _privacy_form($user->uid, "collection", $form['cid']['#value']));
	$form['privacy_settings']['#weight'] = 9;
  $form['#submit'][] = 'privacy_node_form_collection_edit_submit';
}

function privacy_node_form_collection_edit_submit(&$form, &$state){
  $privacy_setting = $state['values']['privacy_settings'];
  
}

/**
 * Sets privacy values when a collection is saved.
 *
 * @global  $user
 * @param <type> $vals
 */
function privacy_node_collection_save($vals)
{
	global $user;
	//stephen changing defaults: $privacy_setting = isset($vals['privacy_setting']) ? $vals['privacy_setting'] : PRIVACY_ONLYME;
	$privacy_setting = isset($vals['privacy_setting']) ? $vals['privacy_setting'] : PRIVACY_PUBLIC;

  privacy_node_set($vals[''], $access)set($user->uid, "collection", $vals['cid'], $privacy_setting);
}

?>
