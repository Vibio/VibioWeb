<?php
require_once("ebay.lib.php");
require_once("ebay.api.php");
require_once("ebay_comm.lib.php");

define("EBAY_SEARCH_NETWORK", 1);
define("EBAY_SEARCH_VIBIO", 2);
define("EBAY_SEARCH_ALL", 3);

function ebay_perm()
{
	return array(
		"ebay admin",
		"ebay link_account",
	);
}

function ebay_menu()
{
	return array(
		"admin/settings/ebay"	=> array(
			"title"				=> "eBay Integration",
			"description"		=> "Manage eBay integration settings: keys, api urls, api versions, etc.",
			"page callback"		=> "drupal_get_form",
			"access arguments"	=> array("ebay admin"),
			"page arguments"	=> array("ebay_admin"),
			"file"				=> "ebay.forms.php",
		),
		"ebay/ajax/service"		=> array(
			"page callback"		=> "ebay_ajax",
			"access callback"	=> "ebay_access",
			"access arguments"	=> array("ebay ajax"),
			"file"				=> "ebay.ajax.php",
			"type"				=> MENU_CALLBACK,
		),
	);
}

function ebay_theme(&$existing, $type, $theme, $path)
{
	return array(
		"ebay_link_account_init"	=> array(
			"arguments"	=> array("session_id" => false),
			"template"	=> "templates/ebay/link-account",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
		"ebay_search_results"		=> array(
			"arguments"	=> array("search_result" => false, 'data' => array()),
			"template"	=> "templates/ebay/ebay-search-results",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
		"ebay_search_result_item"	=> array(
			"arguments"	=> array("item" => false),
			"template"	=> "templates/ebay/ebay-search-result-item",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
		"ebay_empty_search"			=> array(
			"template"	=> "templates/ebay/empty-search",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
	);
}

function ebay_preprocess_ebay_search_results(&$vars)
{	
	// set these to have our custom ebay pager output to use the same theme as drupal
	global $pager_page_array, $pager_total;
	
	$pager_element = is_array($pager_page_array) && !empty($pager_page_array) ? count($pager_page_array) : 0;
	
	
	$pager_page_array[$pager_element] = (int) $vars['search_result']->paginationOutput->pageNumber - 1;
	$pager_total[$pager_element] = (int) $vars['search_result']->paginationOutput->totalPages;
	
	$vars['data']['pager'] = theme("pager", array(), variable_get("ebayapi_entriesperpage", 20), $pager_element);
}

function ebay_preprocess_user_profile(&$vars)
{
	$args = explode("/", $_GET['q']);
	$uid = $args[1];
	
	drupal_add_js("var user_profile_uid = $uid;", "inline");
	drupal_add_js("sites/all/themes/vibio/js/ebay-search.js");
}

function ebay_preprocess_ebay_link_account_init(&$vars)
{
	global $user;
	
	if (!$vars['session_id'])
	{
		$vars['session_id'] = ebay_get_session_id();
	}
	
	$sql = "REPLACE INTO {ebay_pending}
			(`uid`, `session_id`)
			VALUES
			(%d, '%s')";
	db_query($sql, $user->uid, $vars['session_id']);
}

function ebay_network_get_userinfo($uid)
{
	$sql = "SELECT `ebay_id`
			FROM {ebay_users}
			WHERE `uid`=%d";
	$res = db_query($sql, $uid);
	
	$ids = array();
	while ($row = db_fetch_array($res))
	{
		$ids[] = $row['ebay_id'];
	}
	
	return array(
		"ebay_ids"	=> $ids,
	);
}

function ebay_search($op="search", $keys=null)
{
	switch ($op)
	{
		case "search":
			drupal_add_js("sites/all/themes/vibio/js/ebay-search.js");
			return _ebay_search($keys);
		case "name":
			return t("eBay");
		default:
			break;
	}
}

function ebay_search_page($results)
{
	return empty($results[0]) ? theme("ebay_empty_search") : theme("ebay_search_results", $results[0]);
}

function ebay_form_alter(&$form, $state, $id)
{
	global $user;
	
	if ($id == "search_form" && $form['module']['#value'] == "ebay" && $user->uid > 0)
	{
		$options = _ebay_search_user_options();
		if (isset($form['#parameters'][3]))
		{
			preg_match('/users:([a-z]+)/i', $form['#parameters'][3], $defaults);
			
			$default_user_option = array_flip($options);
			$default_user_option = $default_user_option[$defaults[1]];
		}
		
		$form['ebay_advanced'] = array(
			"#type"			=> "fieldset",
			"#title"		=> t("Advanced"),
			"#collapsible"	=> true,
			"#collapsed"	=> false,
			"search_users"	=> array(
				"#type"				=> "select",
				"#title"			=> t("Search Users"),
				"#options"			=> $options,
				"#default_value"	=> $default_user_option,
			),
		);
		
		$form["#validate"][] = "ebay_search_validate";
	}
}

function ebay_search_validate($form, &$state)
{
	$vals = &$state['values'];
	$keys = $vals['processed_keys'];
	$user_options = _ebay_search_user_options();
	
	if (array_key_exists($vals['search_users'], $user_options))
	{
		$keys = preg_replace('/(\s+)users:([a-z]+)/i', '', $keys); //remove any existing value
		$keys .= " users:{$user_options[$vals['search_users']]} ";
	}
	
	form_set_value($form['basic']['inline']['processed_keys'], urldecode(trim($keys)), $state);
}

function ebay_user_social_info($uid)
{
	return array(
		"ebay_inventory"	=> array(
			"title"			=> t("eBay"),
			"custom_ajax"	=> true,
			"args"			=> json_encode(array(
				"url"		=> "/ebay/ajax/service",
				"action"	=> "find_items_advanced",
				"users"		=> $uid,
			)),
		),
	);
}

function ebay_access($perm)
{
	return true;
}
?>