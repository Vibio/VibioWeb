<?php
define("OFFER2BUY_MAX_PRICE", 1000000);
define("OFFER2BUY_MAX_COMMENT_LENGTH", 255);

require_once("offer2buy.actions.php");

function offer2buy_perm()
{
	return array(
		"offer2buy offer",
		"offer2buy admin",
	);
}

function offer2buy_menu()
{
	return array(
		"offer2buy"					=> array(
			"title"				=> "Offer2Buy Dashboard",
			"page callback"		=> "offer2buy_dashboard",
			"access arguments"	=> array("offer2buy offer"),
			"type"				=> MENU_NORMAL_ITEM,
		),
		"offer2buy/%"				=> array(
			"page callback"		=> "offer2buy_dashboard",
			"page arguments"	=> array(1),
			"access arguments"	=> array("offer2buy admin"),
			"file"				=> "offer2buy.actions.php",
			"type"				=> MENU_CALLBACK,
		),
		"offer2buy/ajax/offer/%"	=> array(
			"page callback"		=> "offer2buy_ajax_offer",
			"page arguments"	=> array(3),
			"file"				=> "offer2buy.ajax.php",
			"access arguments"	=> array("offer2buy offer"),
			"type"				=> MENU_CALLBACK,
		),
		"offer2buy/ajax/reject/%/%"	=> array(
			"page callback"		=> "offer2buy_ajax_reject",
			"page arguments"	=> array(3, 4),
			"file"				=> "offer2buy.ajax.php",
			"access arguments"	=> array("offer2buy offer"),
			"type"				=> MENU_CALLBACK,
		),
		"offer2buy/ajax/edit-post-type/%"	=> array(
			"page callback"		=> "offer2buy_ajax_edit_post_type",
			"page arguments"	=> array(3),
			"access callback"	=> "offer2buy_change_list_type_access",
			"access arguments"	=> array(3),
			"file"				=> "offer2buy.forms.php",
		),
		"admin/settings/offer2buy"	=> array(
			"title"				=> "Offer2Buy",
			"description"		=> t("Control offer2buy email messages"),
			"page callback"		=> "drupal_get_form",
			"page arguments"	=> array("offer2buy_admin"),
			"access arguments"	=> array("offer2buy admin"),
			"file"				=> "offer2buy.forms.php",
			"type"				=> MENU_NORMAL_ITEM,
		),
	);
}

function offer2buy_menu_title($type, $uid=false, $return_actions=false, $normal_menu=true)
{
	if (!$uid)
	{
		global $user;
		$uid = $user->uid;
	}
	
	switch ($type)
	{
		case "offers":
			$incoming = _offer2buy_get_user_incoming_offers($uid);
			$outgoing = _offer2buy_get_user_outgoing_offers($uid);
			$total = count($incoming) + count($outgoing);
			$actions = array(
				"incoming"	=> $incoming,
				"outgoing"	=> $outgoing,
			);
			$title = t("Offers !num", array("!num" => $total ? "($total)" : ""));
			break;
		case "actions":
			$required = _offer2buy_dashboard_get_required_actions($uid);
			$pending = _offer2buy_dashboard_get_pending_actions($uid);
			$total = count($required) + count($pending);
			$actions = array(
				"pending"	=> $pending,
				"required"	=> $required,
			);
			$title = t("Actions !num", array("!num" => $total ? "($total)" : ""));
			break;
		case "required-actions":
			$actions = _offer2buy_dashboard_get_required_actions($uid);
			$title = t("Required Actions !num", array("!num" => count($actions) ? "(".count($actions).")" : ""));
			break;
		case "pending-actions":
			$actions = _offer2buy_dashboard_get_pending_actions($uid);
			$title = t("Pending Actions !num", array("!num" => count($actions) ? "(".count($actions).")" : ""));
			break;
		case "item-offers":
			$actions = _offer2buy_get_user_incoming_offers($uid);
			$title = t("Item Offers !num", array("!num" => count($actions) ? "(".count($actions).")" : ""));
			break;
		case "my-offers":
			$actions = _offer2buy_get_user_outgoing_offers($uid);
			$title = t("My Offers !num", array("!num" => count($actions) ? "(".count($actions).")" : ""));
			break;
	}
	
	if ($normal_menu)
	{
		$title = preg_replace('/^([^\(]*)\(([\d]+)\)/', '<span class="menu_with_count_text">\1</span><span class="menu_with_count_count">\2</span><div class="clear"></div>', $title);
	}
	
	return $return_actions ? array("actions" => $actions, "title" => $title) : $title;
}

function offer2buy_views_api()
{
	return array(
		"api"	=> 2,
	);
}

function offer2buy_form_vibio_item_node_form_alter(&$form, &$state)
{
	$nid = $form['nid']['#value'];
	$settings = offer2buy_get_settings($nid);
	
	$form['offer2buy'] = array(
		"#type"				=> "fieldset", // personally don't like this design style but just opinion, leaving for now -- stephen
		"#title"			=> t("Pricing Information (if for sale)"),
		//"#description"		=> t('These options only affect your posting if this item is set to type "selling"'),
		"#collapsible"		=> true,
		"#collapsed"		=> false,
		"#weight"			=> 0, // was: -8, // above the title desired, above 'for sale'?
	);
	
	$form['offer2buy'] = array_merge($form['offer2buy'], _offer2buy_fields_form($nid, $settings));
	
	$form['#validate'][] = "_offer2buy_node_validate";
	$form['#submit'][] = "_offer2buy_node_submit";
}

function _offer2buy_fields_form($nid, $settings)
{
	return array(
		"o2b_price"				=> array(
			"#type"			=> "textfield",
			"#title"		=> t("Price"),
			"#description"	=> t("The listing price for this item (in USD). Leave blank for best offer"),
			"#default_value"=> $settings['price'],
			"#size"			=> 8,
		),
		"o2b_is_negotiable"		=> array(
			"#type"			=> "checkbox",
			"#title"		=> t("Price is Negotiable"),
			"#description"	=> t("This determines whether or not you want to allow other users to offer more or less for the item."),
			"#default_value"=> $settings['is_negotiable'],
		),
		"o2b_allow_offer_views"	=> array(
			"#type"			=> "checkbox",
			"#title"		=> t("Allow Offer Views"),
			"#description"	=> t("Should people viewing your item be able to see the offers on the item?"),
			"#default_value"=> isset($settings['allow_offer_views']) ? $settings['allow_offer_views'] : true,
		),
		"o2b_nid"				=> array(
			"#type"	=> "value",
			"#value"=> $nid,
		),
	);
}

function _offer2buy_node_validate($form, &$state)
{	
	if (!_offer2buy_valid_price($state['values']['o2b_price']))
	{
		form_set_error("o2b_price", t("Invalid price definition."));
	}
}

function _offer2buy_node_submit($form, &$state)
{
	return;
}

function offer2buy_nodeapi(&$node, $op, $a3=null, $a4=null)
{
	if ($node->type == "vibio_item")
	{
		switch ($op)
		{
			case "load":
				global $user;
				
				$settings = offer2buy_get_settings($node->nid);
				
				if ($node->uid == $user->uid || $settings['allow_offer_views'])
				{
					$sql = "SELECT o.*, u.`name`
							FROM {offer2buy_offers} o JOIN {users} u
								ON o.`uid`=u.`uid`
							WHERE o.`rejection_note` IS NULL
								AND o.`nid`=%d
							ORDER BY `offer` DESC, `timestamp` ASC";
					$res = db_query($sql, $node->nid);
					
					$offers = array();
					while ($row = db_fetch_array($res))
					{
						$offers[] = $row;
					}
				}
				
				return array(
					"offer2buy"	=> array(
						"type"		=> $node->field_posting_type[0]['value'],
						"settings"	=> $settings,
						"offers"	=> $offers,
					),
				);
				
				break;
			case "update":
			case "insert":
				$on_sale = $node->field_posting_type[0]['value'] == VIBIO_ITEM_TYPE_SELL;
				$current_settings = offer2buy_get_settings($node->nid);
				$price = preg_replace('/([^\d\.]+)/', "", $node->o2b_price);
				$price = !is_numeric($price) || empty($price) ? 0 : number_format($price, 2, ".", "");
				
				if ($on_sale)
				{
					if ($price == 0)
					{
						$price = 0;
						$node->o2b_is_negotiable = 1;
					}
					
					if (!$current_settings['is_on_sale'])
					{
						module_invoke_all("offer2buy_set_item_on_sale", $node->nid);
						$sql = "REPLACE INTO {offer2buy}
								SET `nid`=%d, `price`=%f, `is_negotiable`=%d, `allow_offer_views`=%d, `is_on_sale`=1";
						db_query($sql, $node->nid, $price, $node->o2b_is_negotiable, $node->o2b_allow_offer_views);
					}
					else
					{
						$sql = "UPDATE {offer2buy}
								SET `price`=%f, `is_negotiable`=%d, `allow_offer_views`=%d, `is_on_sale`=1
								WHERE `nid`=%d";
						db_query($sql, $price, $node->o2b_is_negotiable, $node->o2b_allow_offer_views, $node->nid);
					}
				}
				elseif (!$current_settings)
				{
					$sql = "REPLACE INTO {offer2buy}
							SET `nid`=%d, `price`=%f, `is_negotiable`=%d, `allow_offer_views`=%d, `is_on_sale`=0";
					db_query($sql, $node->nid, $price, 1, 1);
				}
				else
				{
					$sql = "UPDATE {offer2buy}
							SET `is_on_sale`=0
							WHERE `nid`=%d";
					db_query($sql, $node->nid);
				}
				
				break;
			case "delete":
				$sql = "DELETE FROM {offer2buy_offers}
						WHERE `nid`=%d";
				db_query($sql, $node->nid);

				$sql = "DELETE FROM  {offer2buy}
						WHERE `nid`=%d";
				db_query($sql, $node->nid);
			default:
				break;
		}
	}
}

function offer2buy_theme(&$existing, $type, $theme, $path)
{
	return array(
		"offer2buy_init"		=> array(
			"arguments"	=> array("nid" => false, "offer_type" => "new"),
			"template"	=> "templates/offer2buy/init",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
		"offer2buy_list_all_offers"	=> array(
			"arguments"	=> array("items" => array()),
			"template"	=> "templates/offer2buy/all-offers",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
		"offer2buy_list_outgoing_offers" => array(
			"arguments"	=> array("offers" => array()),
			"template"	=> "templates/offer2buy/outgoing-offers",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
		"offer2buy_offer_list"	=> array(
			"arguments"	=> array("offers" => array(), "is_owner" => false),
			"template"	=> "templates/offer2buy/list",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
		"offer2buy_offer"		=> array(
			"arguments"	=> array("offer" => array(), "is_owner" => false),
			"template"	=> "templates/offer2buy/offer",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
		"offer2buy_actions_list"=> array(
			"arguments"	=> array("list"	=> array(), "type" => "required"),
			"template"	=> "templates/offer2buy/action-list",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
		"offer2buy_action_item"	=> array(
			"arguments"	=> array("action"	=> array(), "type" => "required"),
			"template"	=> "templates/offer2buy/action-item",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
		"offer2buy_existing_offers_popup" => array(
			"arguments"	=> array("offer_list"	=> array()),
			"template"	=> "templates/offer2buy/offer-popup",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
	);
}

function offer2buy_get_settings($nid=false)
{
	if (!$nid)
	{
		return false;
	}
	
	$sql = "SELECT *
			FROM {offer2buy}
			WHERE `nid`=%d";
	return db_fetch_array(db_query($sql, $nid));
}

// previous: sneakily calls the init tpl to spaghetti a straightforward owner tpl
function offer2buy_preprocess_product_owner(&$vars) {
	//	$vars['offer2buy'] = theme("offer2buy_init", $vars['item']['node']['nid'], "button");
	//dpm($vars);
	$nid = $vars['item']['node']['nid'];

	$item = node_load($nid);   // seems like this should occur elsewhere, 
		// like it was partly done upstream of here.  Trace later.
	//dpm($item); 

	// Teaser and links to item
	$vars['teaser'] = $item->teaser; // in design this is ~30chars, but I think
		// I like longer?

	// Uh oh: no design for an item page ready yet, no ux.  Maybe it should
	// be a popup?  Maybe expand in place?
	$vars['shortlink'] = l("Item details", "node/" . $item->nid );
	// weird url format: ?highlight=107 highlights that user (= that user's item)


	// Price

	$text = t("make offer");

	// Need the nid of an offer for this node, by this logged in user,
	//  if one exists.  Can do this with views, or simple mysql
	global $user;
	$result = db_query('SELECT nid FROM {node} WHERE type = "offers" AND uid = %d AND status = 1',  $user->uid);
	$row = db_fetch_array($res);  // the point of this is there be just one
//SELECT node.uid from , node where uid=%d AND course_nid=. $user->uid 
	$offer_nid = $row[0]['nid'];
	//!!! Some if this not used in v1.1 ... soon want to differentiate
	// between new offers and editing offers.
$owner_uid = $vars['item']['user']['uid'];
	$owner = user_load( $owner_uid );
	$vars['username'] = "Name: " . $owner->name; // also found in the item array
	// alternate UX: add /collection to the link 
	$vars['usernamelink'] = l($owner->name, "user/$owner->uid");

	if ( 'edit' == 'get edit button' ) {
	} else {
		// Offer url includes current user id, for bookmarking -- 
		//  you'll still be you after you click this link, but the
		//  seller can use the same url this way.
		$uid = $user->uid;

		// Is it on sale?
		// dpm($item->offer2buy[settings][is_on_sale]); i
		//0 = not for sale, 1 = for sale
		if ($item->offer2buy[settings][is_on_sale] == 1) {
			$vars['offer2buy'] = l($text, "offer/$nid/$uid", array('class'=> 'action_button_link'));
			// Price.
			// Note that "insert" is complex... test.  Is price always a number?
			if ( $item->offer2buy[settings][price] > 0 ) {
				$vars['price'] = $item->offer2buy[settings][price];
			}
		// Next: is "negotiable" something to add here?

		} else {
			$nfs_text = t("Just showing my style: Not For Sale");
			//$vars['offer2buy'] = "<div class='not_for_sale'>$nfs_text</div>";
			$vars['offer2buy'] = "<div class='not_for_sale'><img
			  src='/themes/vibio/images/item/not_for_sale.png'
				alt='$nfs_text'
				title='$nfs_text'	 /></div>";	
		}
	}

}

function offer2buy_preprocess_page(&$vars)
{
	drupal_add_css("themes/vibio/css/offer2buy.css");
	drupal_add_js("themes/vibio/js/offer2buy_actions.js");
	drupal_add_js("themes/vibio/js/offer2buy.js");
}

function offer2buy_get_offer($uid, $nid)
{
	$sql = "SELECT *
			FROM {offer2buy_offers}
			WHERE `uid`=%d
				AND `nid`=%d";
	return db_fetch_array(db_query($sql, $uid, $nid));
}

function offer2buy_offer_form(&$state, $nid, $referrer)
{
	global $user;
	
	$settings = offer2buy_get_settings($nid);
	$current_offer = offer2buy_get_offer($user->uid, $nid);
	
	$form = array(
		"uid"		=> array(
			"#type"	=> "value",
			"#value"=> $user->uid,
		),
		"nid"		=> array(
			"#type"	=> "value",
			"#value"=> $nid,
		),
		"destination"	=> array(
			"#type"	=> "value",
			"#value"=> empty($_GET['destination']) ? request_uri() : $_GET['destination'],
		),
		"offer"		=> array(
			"#type"			=> "textfield",
			"#title"		=> t("Offer"),
			"#default_value"=> $current_offer ? $current_offer['offer'] : $settings['price'],
		),
		"comment"	=> array(
			"#type"			=> "textarea",
			"#title"		=> t("Comment"),
			"#description"	=> t("A comment that the seller will see when reviewing offers for this item."),
			"#default_value"=> $current_offer['comment'],
		),
		"submit"	=> array(
			"#type"	=> "submit",
			"#value"=> t("Offer"),
		),
	);
	
	if (!$settings['is_negotiable'])
	{
		$form['offer']['#attributes'] = array(
			"readonly"	=> "readonly",
		);
	}
	
	if ($current_offer)
	{
		$form['#prefix'] = t("You already have a pending offer on this item. The details of that offer are shown below. Any edits will replace your original offer.");
	}
	
	return $form;
}

function offer2buy_offer_form_validate($form, &$state)
{
	$vals = $state['values'];
	$error = false;
	
	if (!_offer2buy_valid_price($vals['offer'], true))
	{
		form_set_error("offer", t("Invalid offer amount"));
		$error = true;
	}
	elseif (strlen($vals['comment']) > OFFER2BUY_MAX_COMMENT_LENGTH)
	{
		form_set_error("comment", t("Comment cannot exceed !limit characters", array("!limit" => OFFER2BUY_MAX_COMMENT_LENGTH)));
		$error = true;
	}
	
	if ($error)
	{
		drupal_goto($vals['destination']);
	}
}

function offer2buy_offer_form_submit($form, &$state)
{
	$vals = $state['values'];
	$offer = number_format($vals['offer'], 2, ".", "");
	
	$sql = "REPLACE INTO {offer2buy_offers}
			SET `nid`=%d, `uid`=%d, `offer`=%f, `timestamp`=%d, `comment`='%s'";
	db_query($sql, $vals['nid'], $vals['uid'], $offer, time(), $vals['comment']);
	
	$node = node_load($vals['nid']);
	$offerer = user_load($vals['uid']);
	$item_owner = user_load($node->uid);
	$offer = array(
		"comment"	=> $vals['comment'],
		"amount"	=> $offer,
	);

	/* stephen: heartbeat and this module invoke the following hook... */
	module_invoke_all("offer2buy_make_offer", $node, $offerer, $item_owner, $offer);
	
	drupal_set_message(t("Your offer has been sent to !user", array("!user" => $item_owner->name)));
	drupal_goto($vals['destination']);
}

/* When someone makes an offer, both they and the owner they made the offer to receive emails.
	This responds to the offer2buy_make_offer hook, also in this module  */
function offer2buy_offer2buy_make_offer($node, $offerer, $owner, $offer)
{
	global $language;
	
	$params = array(
		"offerer"	=> $offerer,
		"owner"		=> $owner,
		"offer"		=> $offer,
		"item"		=> $node,
	);
	
	drupal_mail("offer2buy", "offer_make", $owner->mail, $language, $params);
	drupal_mail("offer2buy", "offer_make_confirm", $offerer->mail, $language, $params);
}

function offer2buy_offerbuy_accept_offer($node, $offerer, $owner, $offer)
{
	global $user;
	
	_offer2buy_cancel_transaction($node->nid, $user->uid, false);
	
	$params = array(
		"item"		=> $node,
		"offerer"	=> $offerer,
		"owner"		=> $owner,
		"offer"		=> $offer,
	);
	
	drupal_mail("offer2buy", "offer_accept", $offerer->mail, $language, $params);
	drupal_mail("offer2buy", "offer_accept_confirm", $owner->mail, $language, $params);
}

function offer2buy_mail($key, &$message, $params)
{
	if ($key == "offer_make" && ($body = variable_get("offer2buy_offer_message", false)))
	{
		$message['subject'] = t("Offer on \"!title\" from !user", array("!title" => $params['item']->title, "!user" => $params['offerer']->name));
		$message['body'] = _offer2buy_replace($body, $params);
	}
	elseif ($key == "offer_make_confirm" && ($body = variable_get("offer2buy_offer_confirmation", false)))
	{
		$message['subject'] = t("Confirmation for offer to !user for item \"!item\"", array("!user" => $params['owner']->name, "!item" => $params['item']->title));
		$message['body'] = _offer2buy_replace($body, $params);
	}
	elseif ($key == "offer_accept" && ($body = variable_get("offer2buy_offer_accept", false)))
	{
		$message['subject'] = t("Offer accepted for \"!item\"!", array("!item" => $params['item']->title));
		$message['body'] = _offer2buy_replace($body, $params);
	}
	elseif ($key == "offer_accept_confirm" && ($body = variable_get("offer2buy_offer_accept_confirm", false)))
	{
		$message['subject'] = t("Offer acceptance confirmation: \$!offer from !offerer", array("!offer" => $params['offer']['amount'], "!offerer" => $params['offerer']->name));
		$message['body'] = _offer2buy_replace($body, $params);
	}
}

function _offer2buy_valid_price($price, $force_required=false)
{
	if (!is_numeric($price) || empty($price))
	{
		if ($force_required)
		{
			return false;
		}
		
		$price = 0;
	}
	
	$price = number_format($price, 2, ".", "");
	return $price >= 0 && $price <= OFFER2BUY_MAX_PRICE;
}

function _offer2buy_replace($message, $params)
{
	$link_options = array(
		"absolute"	=> true,
	);
	
	$private_msg_subject = "{$params['item']->title}";
	
	$replacements = array(
		"!offerer_message_url"	=> url("messages/new/{$params['offerer']->uid}/$private_msg_subject", $link_options),
		"!owner_message_url"	=> url("messages/new/{$params['owner']->uid}/$private_msg_subject", $link_options),
		"!offerer"				=> l($params['offerer']->name, "user/{$params['offerer']->uid}", $link_options),
		"!owner"				=> l($params['owner']->name, "user/{$params['owner']->uid}", $link_options),
		"!item"					=> l($params['item']->title, "node/{$params['item']->nid}", $link_options),
		"!comment"				=> filter_xss($params['offer']['comment']),
		"!offer"				=> $params['offer']['amount'],
	);
	
	foreach ($replacements as $search => $replace)
	{
		$message = str_replace($search, $replace, $message);
	}
	
	return $message;
}

function offer2buy_forms($id, $args)
{
	if (strpos($id, "offer2buy_offer_accept_form_") !== false)
	{
		$forms[$id] = array(
			"callback"	=> "offer2buy_offer_accept_form",
		);
	}
	elseif (strpos($id, "offer2buy_action_complete_") !== false)
	{
		$forms[$id] = array(
			"callback"	=> "offer2buy_action_complete_form",
		);
	}
	elseif (strpos($id, "offer2buy_transaction_cancel_") !== false)
	{
		$forms[$id] = array(
			"callback"	=> "offer2buy_transaction_cancel_form",
		);
	}
	elseif (strpos($id, "offer2buy_reject_form_") !== false)
	{
		$forms[$id] = array(
			"callback"	=> "offer2buy_offer_reject_form",
		);
	}

	// stephen: was if ($forms) producing errors all the time, try...	
	if (isset($forms))
	{
		return $forms;
	}
}

function offer2buy_transaction_cancel_form(&$state, $nid)
{
	global $user;
	
	return array(
		"nid"		=> array(
			"#type"	=> "value",
			"#value"=> $nid,
		),
		"canceller"	=> array(
			"#type"	=> "value",
			"#value"=> $user->uid,
		),
		"submit"	=> array(
			"#type"	=> "submit",
			"#value"=> t("Cancel"),
		),
		"#submit"	=> array(
			"offer2buy_transaciton_cancel_form_submit",
		),
		"#attributes"	=> array(
			"class"	=> "offer2buy_transaction_cancel_form",
		),
	);
}

function offer2buy_transaciton_cancel_form_submit($form, &$state)
{
	_offer2buy_cancel_transaction($state['values']['nid'], $state['values']['canceller']);
}

function offer2buy_offer_accept_form(&$state, $uid, $nid)
{
	if (offer2buy_offer_is_pending($uid, $nid))
	{
		return array(
			"pending"	=> array(
				"#value"	=> "<span class='offer2buy_pending_offer'>".t("(pending)")."</span>",
			),
		);
	}
	
	return array(
		"uid"		=> array(
			"#type"	=> "value",
			"#value"=> $uid,
		),
		"nid"		=> array(
			"#type"	=> "value",
			"#value"=> $nid,
		),
		"submit"	=> array(
			"#type"			=> "submit",
			"#value"		=> t("Accept Offer"),
			"#attributes"	=> array(
				"class"	=> "offer2buy_accept_init",
			),
		),
		"reject"	=> array(
			"#type"			=> "submit",
			"#value"		=> t("Reject Offer or Negotiate"),
			"#attributes"	=> array(
				"class"	=> "reject_offer_{$uid}_{$nid} offer2buy_reject_init",
			),
		),
		"#submit"	=> array(
			"offer2buy_offer_accept_form_submit",
		),
		"#attributes"	=> array(
			"class"	=> "offer2buy_offer_accept_form",
		),
	);
}

function offer2buy_offer_accept_form_submit($form, &$state)
{
	$op = $state['clicked_button']['#value'];
	
	if ($op == t("Reject Offer or Negotiate"))
	{
		return;
	}
	
	$vals = $state['values'];
	$node = node_load($vals['nid']);
	$offerer = user_load($vals['uid']);
	$owner = user_load($node->uid);
	
	$sql = "SELECT `offer` AS amount, `comment`
			FROM {offer2buy_offers}
			WHERE `uid`=%d
				AND `nid`=%d";
	$offer = db_fetch_array(db_query($sql, $offerer->uid, $node->nid));
	
	module_invoke_all("offerbuy_accept_offer", $node, $offerer, $owner, $offer);
	_offer2buy_init_actions($node->nid, $offerer->uid, $owner->uid);
	
	if (module_exists("profile_ext"))
	{
		$message = t("You've accepted !buyer's offer on !item. Now you need to arrange payment with them. !message", array(
			"!buyer"	=> l($offerer->name, "user/{$offerer->uid}"),
			"!item"		=> l($node->title, "node/{$node->nid}"),
			"!message"	=> l(t("Send !user a message", array("!user" => $offerer->name)), "messages/new/{$offerer->uid}"),
		));
		
		drupal_set_message($message);
		drupal_goto("my-dashboard/actions");
	}
}

function offer2buy_offer_reject_form(&$state, $uid, $nid)
{
	$offer = offer2buy_get_offer($uid, $nid);
	$offerer = user_load($uid);
	$t_args = array(
		"!amount" 	=> "\${$offer['offer']}",
		"!user"		=> $offerer->name,
	);
	
	return array(
		"#prefix"		=> t("Send <em>!user</em> a reason for rejecting the offer of !amount, or suggest a new agreement.", $t_args),
		"offerer"	=> array(
			"#type"	=> "value",
			"#value"=> $offerer,
		),
		"nid"			=> array(
			"#type"	=> "value",
			"#value"=> $nid,
		),
		"destination"	=> array(
			"#type"	=> "value",
			"#value"=> $_SERVER['HTTP_REFERER'],
		),
		"reason"		=> array(
			"#type"			=> "textarea",
			"#title"		=> t("Reason"),
			"#description"	=> '', // too wordy? t("Why are you rejecting this offer?"),
		),
		"submit"		=> array(
			"#type"	=> "submit",
			"#value"=> t("Reject Offer or Negotiate"),
		),
		"cancel"		=> array(
			"#type"	=> "submit",
			"#value"=> t("Cancel"),
		),
		"#submit"		=> array(
			"offer2buy_offer_reject_form_submit",
		),
		"#attributes"	=> array(
			"class"	=> "offer2buy_offer_reject_form",
		),
	);
}

function offer2buy_offer_reject_form_submit($form, &$state)
{
	if ($state['clicked_button']['#value'] == t("Cancel"))
	{
		return;
	}
	
	$vals = $state['values'];
	
	$sql = "UPDATE {offer2buy_offers}
			SET `rejection_note`='%s'
			WHERE `uid`=%d
				AND `nid`=%d";
	db_query($sql, substr($vals['reason'], 0, 255), $vals['offerer']->uid, $vals['nid']);
	drupal_set_message(t("The offer from !user has been rejected", array("!user" => $vals['offerer']->name)));
	drupal_goto($vals['destination']);
}

function offer2buy_change_list_type_access($nid)
{
	global $user;
	
	$sql = "SELECT `uid`
			FROM {node}
			WHERE `nid`=%d";
	$uid = db_result(db_query($sql, $nid));		
	
	return $uid == $user->uid;
}

function offer2buy_profile_ext_dashboard($uid)
{
	drupal_add_css("themes/vibio/css/offer2buy.css");
	
	$offers = offer2buy_menu_title("offers", $uid, true, false);
	$actions = offer2buy_menu_title("actions", $uid, true, false);
	
	return array(
		$offers['title'] 	=> theme("offer2buy_list_all_offers", $offers['actions']['incoming']).theme("offer2buy_list_outgoing_offers", $offers['actions']['outgoing']),
		$actions['title']	=> theme("offer2buy_actions_list", $actions['actions']['required'], "required").theme("offer2buy_actions_list", $actions['actions']['pending'], "pending"),
	);
}

function offer2buy_profile_ext_menuitems()
{
	return array(
		"item-offers"		=> "offer2buy_menu_title",
		"my-offers"			=> "offer2buy_menu_title",
		"required-actions"	=> "offer2buy_menu_title",
		"pending-actions"	=> "offer2buy_menu_title",
		"offers"			=> "offer2buy_menu_title",
		"actions"			=> "offer2buy_menu_title",
	);
}

function offer2buy_reports_daily_cron($last_run)
{
	$sql = "SELECT COUNT(*) total_transactions, SUM(`price`) amount_transacted
			FROM {offer2buy_completed_transactions}
			WHERE `timestamp` > %d";
	$res = db_query($sql, $last_run);
	
	if ($row = db_fetch_object($res))
	{
		reports_log("total transactions", $row->total_transactions);
		reports_log("amount transacted", $row->amount_transacted);
	}
	
	if ($employee_role = variable_get("reports_employee_role", false))
	{
		$sql = "SELECT COUNT(*) total_transactions, SUM(`price`) amount_transacted
				FROM {offer2buy_completed_transactions}
				WHERE `timestamp` > %d
					AND `buyer` NOT IN (
						SELECT `uid`
						FROM {users_roles}
						WHERE `rid`=%d
					)
					AND `seller` NOT IN (
						SELECT `uid`
						FROM {users_roles}
						WHERE `rid`=%d
					)
				";
		$res = db_query($sql, $last_run, $employee_role, $employee_role);
		
		if ($row = db_fetch_object($res))
		{
			reports_log("total transactions noemployee", $row->total_transactions);
			reports_log("amount transacted noemployee", $row->amount_transacted);
		}
	}
}

function offer2buy_imap_fetch_node_image_attach($image, $node)
{
	if (!isset($node->offer2buy))
	{
		return false;
	}
	
	return array(
		"o2b_is_negotiable"		=> $node->offer2buy['settings']['is_negotiable'],
		"o2b_allow_offer_views"	=> $node->offer2buy['settings']['allow_offer_views'],
		"o2b_price"				=> $node->offer2buy['settings']['price'],
	);
}
?>
