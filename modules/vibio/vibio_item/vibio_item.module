<?php
require_once("vibio_item.inc.php");

define("VIBIO_ITEM_TYPE_OWN", 1);
define("VIBIO_ITEM_TYPE_SELL", 2);

function vibio_item_exit($destination=null)
{
	if ($destination && !empty($_GET['searchcrumb']) && strpos($destination, "?") === false && preg_match('/node\/([0-9]+)$/i', $destination, $matches))
	{
		drupal_goto($matches[0], "searchcrumb={$_GET['searchcrumb']}"); //hopefully i don't endlessly loop here...
	}
}

function vibio_item_theme(&$existing)
{
	return array(
		"vibio_item_user_other_items"	=> array(
			"arguments" => array("node" => false, "display" => array()),
			"template"	=> "templates/vibio_item/other-items",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
		"vibio_item_images"				=> array(
			"arguments"	=> array("images"	=> array()),
			"template"	=> "templates/vibio_item/additional-images",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
		"vibio_item_price_image"		=> array(
			"arguments"	=> array("item" => false, "image_type" => "full"),
			"template"	=> "templates/vibio_item/price-image",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
	);
}

function vibio_item_form_alter(&$form, &$state, $id)
{
	global $user;
	
	if ($id == "vibio_item_node_form")
	{	
		_vibio_item_unset($form);
		_vibio_item_defaults($form);
	}
	elseif ($id == "search_form" && $form['module']['#value'] == "vibio_item" && $user->uid > 0 && !module_exists("product"))
	{
		$options = _vibio_item_user_options();
		if (!empty($form['#parameters'][3]))
		{
			preg_match('/(\s+)users:([a-z]+)/i', $form['#parameters'][3], $defaults);
			$default_user_option = array_flip($options);
			$default_user_option = $defaults[2];
		}
		
		$form['vibio_advanced'] = array(
			"#type"			=> "fieldset",
			"#title"		=> t("Advanced"),
			"#collapsible"	=> true,
			"#collapsed"	=> false,
			"search_users"	=> array(
				"#type"			=> "select",
				"#title"		=> t("Search Users"),
				"#options"		=> $options,
				"#default_value"=> $default_user_option,
			),
		);
		
		$form["#validate"][] = "vibio_item_search_validate";
	}
}

function vibio_item_form_node_delete_confirm_alter(&$form, &$state)
{
	$node = node_load($form['nid']['#value']);

	if ($node->type != "vibio_item")
		return;

	$image = _vibio_item_get_image($node->nid);
	drupal_set_title(t("Are you sure you want to delete?"));

	$form['description']['#value'] = "
		<table class='vibio_item_delete_summary'>
			<tr>
				<td>
					<a href='/node/{$node->nid}'>
						<img src='$image' />
					</a>
				</td>
				<td class='node_info'>
					<a href='/node/{$node->nid}'>
						{$node->title}
					</a>
				</td>
			</tr>
		</table>
		{$form['description']['#value']}
	";
}

function vibio_item_search_validate($form, &$state)
{
	$vals = &$state['values'];
	$keys = $vals['processed_keys'];
	$user_options = _vibio_item_user_options();
	
	if (array_key_exists($vals['search_users'], $user_options))
	{
		$keys = preg_replace('/(\s+)users:([a-z]+)/i', '', $keys); //remove any existing value
		$keys .= " users:{$vals['search_users']} ";
	}
	
	form_set_value($form['basic']['inline']['processed_keys'], urldecode(trim($keys)), $state);
}

function vibio_item_search($op="search", $keys=null)
{
	switch ($op)
	{
		case "name":
			return t("Item"); /* grep: Vibio-Item-search */
		case "search":
			return _vibio_item_search($keys);
	}
}

function vibio_item_preprocess_node(&$vars)
{
	if (!$vars['teaser'] && $vars['node']->type == "vibio_item")
	{	
		if (!_vibio_item_access($vars['node']))
		{
			drupal_goto("privacy/restricted/{$vars['node']->uid}/item", "destination=node/{$vars['node']->nid}");
		}
		else
		{
			_vibio_item_clear_insert_message();
			
			$node = $vars['node'];
			$images = array();
			if (!empty($node->field_main_image[0]['filepath']))
			{
				$images[] = file_create_url($node->field_main_image[0]['filepath']);
			}
			
			if (!empty($node->field_images))
			foreach ($node->field_images as $image)
			{
				if (file_exists($image['filepath']))
				{
					$images[] = file_create_url($image['filepath']);
				}
			}
			
			$extra_images = module_invoke_all("vibio_item_images", $node->nid);
			$images = array_merge($extra_images, $images);
			$vars['item_extra_images'] = theme("vibio_item_images", $images);
		}
	}
}

function vibio_item_preprocess_vibio_item_price_image(&$vars)
{
	if (!$vars['item'])
	{
		$item = new stdClass;
		$item->field_posting_type[0]['value'] = VIBIO_ITEM_TYPE_OWN;
		$vars['item'] = $item;
	}
	elseif (!$vars['item']->field_posting_type)
	{
		$vars['item']->field_posting_type[0]['value'] = $vars['item']->node_data_field_posting_type_field_posting_type_value ?
			$vars['item']->node_data_field_posting_type_field_posting_type_value : VIBIO_ITEM_TYPE_OWN;
	}
}

function vibio_item_preprocess_vibio_item_user_other_items(&$vars)
{
	$display_type = module_exists("collection") ? "collection" : "inventory";
	$u = user_load($vars['node']->uid);
	
	if ($display_type == "collection")
	{
		module_load_include("inc", "collection");
		
		$display = t("\"!current_item\" is part of !user's following collections:", array("!user" => l($u->name, "user/{$u->uid}"), "!current_item" => $vars['node']->title));
		$display .= "<ul>";
		
		foreach (collection_get_item_cid($vars['node']->nid) as $cid)
		{
			$collection = collection_load($cid);
			$display .= "<li><a href='/collections/{$cid}'>{$collection['title']}</a></li>";
		}
		$display .= "</ul>";
		$display .= t("!view_collections of !user's collections", array("!view_collections" => l(t("View all"), "user/{$u->uid}/inventory"), "!user" => l($u->name, "user/{$u->uid}")));
	}
	else
	{
		$display = t("!browse more of !user's items", array("!user" => $u->name, "!browse" => l(t("Browse"), "user/{$u->uid}/inventory")));
	}
	
	$vars['display'] = $display;
}

function vibio_item_profile_ext_public_info($uid)
{
	$access = privacy_get_access_level($uid);
	
	$sql = "SELECT COUNT(*)
			FROM {node} n JOIN {privacy_settings} p
				ON n.`nid`=p.`type_id`
					AND n.`uid`=p.`uid`
			WHERE n.`uid`=%d
				AND p.`type`='node'
				AND p.`setting` <= %d";
	$total_items = db_result(db_query($sql, $uid, $access));
	
	$sql = "SELECT n.`nid`
			FROM {node} n JOIN {privacy_settings} p
				ON n.`nid`=p.`type_id`
					AND n.`uid`=p.`uid`
			WHERE n.`uid`=%d
				AND n.`type`='vibio_item'
				AND p.`type`='node'
				AND p.`setting` <= %d
			ORDER BY n.`created` DESC
			LIMIT 1";
	$nid = db_result(db_query($sql, $uid, $access));
	
	if ($node = node_load($nid))
	{
		$image = _vibio_item_get_image($nid);
		$link = $image == _vibio_item_default_image() ? $node->title : "<img class='user_latest_item' src='$image' title='{$node->title}' alt='{$node->title}' />";
		$latest_item = l($link, "node/{$node->nid}", array("html" => true));
	}
	else
	{
		$latest_item = "-";
	}
	
	return array(
		array(
			"weight"=> -10,
			"title"	=> t("Number of items"),
			"data"	=> $total_items,
		),
		array(
			"weight"=> 100,
			"title"	=> t("Latest Item"),
			"data"	=> $latest_item,
		),
	);
}

function vibio_item_newuser_tutorial($u, $user_stage)
{
	$stage_number = 2;
	
	if ($user_stage >= $stage_number)
	{
		return array(array(
			"stage" => $stage_number,
			"header"=> t("Add Items"),
		));
	}
	
	module_load_include("php", "vibio_item", "vibio_item.inc");
	$form = drupal_get_form("vibio_item_newuser_search", $u->uid, $stage_number);
	$content = $form."<div class='clear'></div><div style='text-align: center; margin-top: 25px; position: relative; left: 25px;'>".t("In the future, you can search for items or people using the top search bar")."</div>";
	
	return array(array(
		"stage"			=> $stage_number,
		"header"		=> t("Add Items"),
		"content_header"=> t("Add Items to Your Inventory"),
		"steps"			=> array(
			(object) array(
				"header"	=> "",
				"available"	=> true,
				"complete"	=> false,
				"content"	=> $content,
			),
		),
	));
}

function vibio_item_badge_user_login($uid) {
	$date_diff_tstamp = time() - 60*60*24*30*6; // 6 months
	
	if (!($badge = badge_load_special("500_items_6_months")) || badge_user_has_badge($badge->bid, $uid)) {
		return;
	}
	
	$sql = "SELECT COUNT(*)
			FROM {node} n
			WHERE n.`uid`=%d
				AND n.`type`='%s'
				AND n.`created` <= $%d";
	$total_items = db_result(db_query($sql, $uid, "vibio_item", $date_diff_tstamp));
	
	if ($total_items >= 500) {
		badge_give_badge($badge->bid, $uid);
	}
}

function vibio_item_views_api()
{
	return array(
		"api"	=> 2,
	);
}
?>
