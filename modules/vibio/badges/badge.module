<?php
define("BADGE_TYPE_SPECIAL", 0);
define("BADGE_TYPE_ITEM", 1);
define("BADGE_TYPE_PRODUCT", 2);
define("BADGE_TYPE_COLLECTION", 3);
define("BADGE_TYPE_FRIENDS", 4);
define("BADGE_TYPE_ITEM_SELL", 5);
define("BADGE_TYPE_ITEM_BUY_BY_CATEGORYTIME", 6); // format: amount_category_timeframe (10_5_30 = 10 items of category 5 in 30 days)
define("BADGE_TYPE_MEMBER_SINCE", 7);

define("BADGE_IMAGE_DIR", "badges");

function badge_perm()
{
	return array(
		"badge admin",
	);
}

function badge_menu()
{
	return array(
		"admin/settings/badges"			=> array(
			"title"				=> "Badges",
			"page callback"		=> "badge_admin",
			"access arguments"	=> array("badge admin"),
			"file"				=> "badge.pages.inc",
			"type"				=> MENU_NORMAL_ITEM,
		),
		"admin/settings/badges/list"	=> array(
			"title"	=> "List",
			"type"	=> MENU_DEFAULT_LOCAL_TASK,
			"weight"=> -10,
		),
		"admin/settings/badges/new"		=> array(
			"title"				=> "New Badge",
			"page callback"		=> "drupal_get_form",
			"page arguments"	=> array("badge_edit", false),
			"access arguments"	=> array("badge admin"),
			"file"				=> "badge.pages.inc",
			"type"				=> MENU_LOCAL_TASK,
		),
		"admin/settings/badges/triggers"=> array(
			"title"				=> "Special Triggers",
			"description"		=> "These are the special triggers the Vibio code knows about",
			"page callback"		=> "badge_special_triggers_page",
			"access arguments"	=> array("badge admin"),
			"file"				=> "badge.pages.inc",
			"type"				=> MENU_LOCAL_TASK,
		),
		"admin/settings/badges/%badge"	=> array(
			"title"				=> "Manage Badge",
			"page callback"		=> "drupal_get_form",
			"page arguments"	=> array("badge_edit", 3),
			"access arguments"	=> array("badge admin"),
			"file"				=> "badge.pages.inc",
			"type"				=> MENU_CALLBACK,
		),
	);
}

function badge_user($op, &$edit, &$account, $category=null)
{
	switch ($op)
	{
		case "login":
			module_load_include("inc", "badge");
			$count = badge_user_get_amount($account->uid, BADGE_TYPE_MEMBER_SINCE);
			$next_badge = badge_get_next_badge(BADGE_TYPE_MEMBER_SINCE, $count);
			
			if ($next_badge && $count >= $next_badge->trigger)
			{
				badge_give_badge($next_badge->bid, $account->uid);
			}
			
			break;
		case "insert":
			module_load_include("inc", "badge");
			if (!($badge = badge_load_special("user_create")))
			{
				return;
			}
			
			badge_give_badge($badge->bid, $account->uid, true);
			break;
		case "delete":
			$sql = "DELETE FROM {badge_user_badges}
					WHERE `uid`=%d";
			db_query($sql, $account->uid);
			break;
	}
}

function badge_nodeapi(&$node, $op, $a3=null, $a4=null)
{
	if (!in_array($node->type, array("vibio_item", "product")))
	{
		return;
	}
	
	$type = $node->type == "vibio_item" ? BADGE_TYPE_ITEM : BADGE_TYPE_PRODUCT;
	
	switch ($op)
	{
		case "insert":
			module_load_include("inc", "badge");
			$count = badge_user_get_amount($node->uid, $type);
			$next_badge = badge_get_next_badge($type, $count);
			
			if ($next_badge && $count >= $next_badge->trigger)
			{
				badge_give_badge($next_badge->bid, $node->uid);
			}
			
			break;
	}
}

function badge_theme()
{
	return array(
		"badge_alert_badge"	=> array(
			"arguments"	=> array("badge" => false),
			"template"	=> "templates/badge/alert-badge",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
		"badge_alert_badge_single" => array(
			"arguments"	=> array("badge" => false),
			"template"	=> "templates/badge/alert-badge-single",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
		"badge_alert"		=> array(
			"arguments"	=> array("badges" => array()),
			"template"	=> "templates/badge/alert",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
		"badge_list_badge"	=> array(
			"arguments"	=> array("badge" => false),
			"template"	=> "templates/badge/list-badge",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
		"badge_list"		=> array(
			"arguments"	=> array("uid" => 1),
			"template"	=> "templates/badge/list",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
	);
}

function badge_collections_insert($collection)
{
	module_load_include("inc", "badge");
	$count = badge_user_get_amount($collection['uid'], BADGE_TYPE_COLLECTION);
	$next_badge = badge_get_next_badge(BADGE_TYPE_COLLECTION, $count);
	
	if ($next_badge && $count >= $next_badge->trigger)
	{
		badge_give_badge($next_badge->bid, $collection['uid']);
	}
}

function badge_fb_link_account($u, $is_signup)
{
	module_load_include("inc", "badge");
	
	if ($badge = badge_load_special("fb_link"))
	{
		badge_give_badge($badge->bid, $u->uid, $is_signup);
	}
}

function badge_ebay_add_account($uid)
{
	module_load_include("inc", "badge");
	
	if ($badge = badge_load_special("ebay_link"))
	{
		badge_give_badge($badge->bid, $uid);
	}
}

function badge_offer2buy_complete_actions($seller_uid, $node)
{
	module_load_include("inc", "badge");
	$buyer_uid = $node->uid;
	
	// SPECIAL: sell/buy from a friend
	if (module_exists("network") && in_array($node->uid, _network_get_friends($seller_uid, 1)))
	{
		if ($badge = badge_load_special("sell_to_friend"))
		{
			badge_give_badge($badge->bid, $seller_uid);
		}
		
		if ($badge = badge_load_special("buy_from_friend"))
		{
			badge_give_badge($badge->bid, $node->uid);
		}
	}
	
	// SPECIAL: fast sell (sell within 6 hours)
	if (time() - $node->created <= 60*60*6 && $badge = badge_load_special("fast_sell"))
	{
		badge_give_badge($badge->bid, $seller_uid);
	}
	
	// # of items in buyer's inventory
	$count = badge_user_get_amount($buyer_uid, BADGE_TYPE_ITEM);
	$next_badge = badge_get_next_badge(BADGE_TYPE_ITEM, $count);
	
	if ($next_badge && $count >= $next_badge->trigger)
	{
		badge_give_badge($next_badge->bid, $buyer_uid);
	}
	
	// # of items sold by seller
	$count = badge_user_get_amount($seller_uid, BADGE_TYPE_ITEM_SELL);
	$next_badge = badge_get_next_badge(BADGE_TYPE_ITEM_SELL, $count);
	
	if ($next_badge && $count >= $next_badge->trigger)
	{
		badge_give_badge($next_badge->bid, $seller_uid);
	}
	
	// # of items bought by buyer (by category)
	if (module_exists("product"))
	{	
		$params = (object) array(
			"category"	=> vibio_item_get_category($node->nid),
		);
		
		$sql = "SELECT `bid`, `trigger`
				FROM {badge}
				WHERE `type`=%d
					AND `trigger` LIKE '%%_%d_%%'";
		$res = db_query($sql, BADGE_TYPE_ITEM_BUY_BY_CATEGORYTIME, $params->category);
		
		while ($badge = db_fetch_object($res))
		{
			$trigger_params = explode("_", $badge->trigger);
			if (count($trigger_params) != 3)
			{
				continue;
			}
			
			$params->amount = $trigger_params[0];
			$params->timeframe = $trigger_params[2];
			
			$count = badge_user_get_amount($buyer_uid, BADGE_TYPE_ITEM_BUY_BY_CATEGORYTIME, $params);
			
			if ($count >= $params->amount)
			{
				badge_give_badge($badge->bid, $buyer_uid);
			}
		}
	}
}

function badge_user_relationships($op, &$rel)
{
	if ($op != "approve")
	{
		return;
	}
	
	module_load_include("inc", "badge");
	
	$count = badge_user_get_amount($rel->requestee->uid, BADGE_TYPE_FRIENDS);
	$next_badge = badge_get_next_badge(BADGE_TYPE_FRIENDS, $count);
	
	if ($next_badge && $count >= $next_badge->trigger)
	{
		badge_give_badge($next_badge->bid, $rel->requestee->uid);
	}
	
	$count = badge_user_get_amount($rel->requester->uid, BADGE_TYPE_FRIENDS);
	$next_badge = badge_get_next_badge(BADGE_TYPE_FRIENDS, $count);
	
	if ($next_badge && $count >= $next_badge->trigger)
	{
		badge_give_badge($next_badge->bid, $rel->requester->uid);
	}
}

function badge_preprocess_page(&$vars)
{
	global $user;

	$sql = "SELECT b.bid, b.`image`, b.`title`, b.`description`, ub.`tstamp`
			FROM {badge} b JOIN {badge_user_badges} ub
				ON b.`bid`=ub.`bid`
			WHERE ub.`uid`=%d
				AND ub.`delivered`=%d
			ORDER BY b.`title`";
	$res = db_query($sql, $user->uid, 0);
	
	$badges = array();
	while ($badge = db_fetch_object($res))
	{
		$badge->image_src = file_create_url($badge->image);
		$badges[$badge->bid] = $badge;
	}
	
	if (empty($badges))
	{
		return;
	}
	
	$sql = "UPDATE {badge_user_badges}
			SET `delivered`=%d
			WHERE `uid`=%d
				AND `delivered`=%d";
	db_query($sql, 1, $user->uid, 0);
	
	$popup_html = theme("badge_alert", $badges);
	
	drupal_add_css("themes/vibio/css/badge.css");
	drupal_add_js("themes/vibio/js/badge.js");
	drupal_add_js(array(
		"badge"	=> array(
			"popup_html" => $popup_html,
		)
	), "setting");
}

function badge_preprocess_badge_list($vars)
{
	module_load_include("inc", "badge");
	drupal_add_css("themes/vibio/css/badge.css");
	
	$out = "";
	foreach (badge_get_user_badges($vars['uid']) as $bid => $badge)
	{
		$badge->image_src = file_create_url($badge->image);
		$out .= theme("badge_list_badge", $badge);
	}
	
	$vars['badge_html'] = $out;
}

function badge_preprocess_badge_alert($vars)
{
	$badges = $vars['badges'];
	
	if (count($badges) == 1)
	{
		$badge = array_shift($badges);
		$vars['badge_title'] = t("You've earned the '!title' badge", array("!title" => $badge->title));
		$badge_html = theme("badge_alert_badge_single", $badge);
	}
	else
	{
		$vars['badge_title'] = t("You've earned the following badges", array("!title" => $badges[0]->title));
		$badge_html = "";
		
		foreach ($badges as $badge)
		{
			$badge_html .= theme("badge_alert_badge", $badge);
		}
	}
	
	$vars['badge_html'] = $badge_html;
}

function badge_load($bid)
{
	static $badges = array();
	
	if (isset($badges[$bid]))
	{
		return $badges[$bid];
	}
	
	$sql = "SELECT *
			FROM {badge}
			WHERE `bid`=%d";
	$badges[$bid] = db_fetch_object(db_query($sql, $bid));
	
	return $badges[$bid];
}
?>