<?php
function fb_perm()
{
	return array(
		"fb admin",
		"fb user",
	);
}

function fb_menu()
{
	return array(
		"admin/settings/facebook"	=> array(
			"title"				=> "Facebook Settings",
			"page callback"		=> "drupal_get_form",
			"page arguments"	=> array("facebook_admin"),
			"access arguments"	=> array("fb admin"),
			"file"				=> "fb.admin.inc",
			"type"				=> MENU_NORMAL_ITEM,
		),
		"facebook/signup"		=> array(
			"title"				=> "Sign Up Using Facebook",
			"page callback"		=> "fb_user_signup",
			"access arguments"	=> array("fb user"),
			"file"				=> "fb.pages.inc",
			"type"				=> MENU_CALLBACK,
		),
		"facebook/link-account"	=> array(
			"page callback"		=> "fb_user_link_account",
			"access arguments"	=> array("fb user"),
			"file"				=> "fb.pages.inc",
			"type"				=> MENU_CALLBACK,
		),
		"facebook/remove-account"	=> array(
			"page callback"		=> "fb_user_remove_account",
			"access arguments"	=> array("fb user"),
			"file"				=> "fb.pages.inc",
			"type"				=> MENU_CALLBACK,
		),
	);
}

function fb_user($op, &$edit, &$u, $category=null)
{
	switch ($op)
	{
		case "insert":
			if ($edit['fb_id'])
			{
				module_load_include("inc", "fb");
				fb_save_user($u, $edit['fb_id']);
				$edit['fb_id'] = null;
			}
			break;
		case "delete";
			$sql = "DELETE FROM {fb_users}
					WHERE `uid`=%d";
			db_query($sql, $u->uid);
	}
}

function fb_nodeapi(&$node, $op, $a3=null, $a4=null)
{
	if ($node->type != "vibio_item")
	{
		return;
	}
	
	module_load_include("inc", "fb");
	
	switch ($op)
	{
		case "insert":
			fb_register_prompt("share_item", $node->nid);
			break;
	}
}

function fb_offer2buy_set_item_on_sale($nid)
{
	module_load_include("inc", "fb");
	fb_register_prompt("share_item", $nid);
}

function fb_offer2buy_complete_actions($old_uid, $node)
{
	fb_register_prompt("buy_item", $node->nid);
}

function fb_block($op="list", $delta=0, $edit=array())
{
	switch ($op)
	{
		case "list":
			return array(
				"fb_login"			=> array(
					"info"	=> t("Facebook Login"),
				),
				"fb_dialogs"	=> array(
					"info"	=> t("Facebook Dialogs"),
				),
				"fb_api_init"		=> array( // this block is REQUIRED for any fb things to work.
					"info"	=> t("Facebook API Init"),
				),
			);
		case "view":
			switch ($delta)
			{
				case "fb_login":
					return array(
						"subject"	=> "",
						"content"	=> theme("fb_login_block"),
					);
				case "fb_api_init":
					drupal_add_css("sites/all/themes/vibio/css/facebook.css");
					module_load_include("inc", "fb");
					fb_add_js();
					
					return array(
						"subject"	=> "",
						"content"	=> "<div id='fb-root'></div>",
					);
				case "fb_dialogs":
					return array(
						"subject"	=> "",
						"content"	=> theme("fb_dialogs"),
					);
			}
	}
}

function fb_theme(&$existing, $type, $theme, $path)
{
	return array(
		"fb_login_block"	=> array(
			"arguments"	=> array(),
			"template"	=> "templates/facebook/login-block",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
		"fb_share"			=> array(
			"arguments"	=> array("share_id" => false, "share_type" => "node"),
			"template"	=> "templates/facebook/share",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
		"fb_dialogs"		=> array(
			"arguments"	=> array(),
			"template"	=> "templates/facebook/dialogs",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
		"fb_wrong_login"	=> array(
			"arguments"	=> array(),
			"template"	=> "templates/facebook/wrong-login",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
		"fb_login_prompt"	=> array(
			"arguments"	=> array(),
			"template"	=> "templates/facebook/login-prompt",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
		"fb_share_success"	=> array(
			"arguments"	=> array(),
			"template"	=> "templates/facebook/share-success",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
		"fb_prompt_account_link"	=> array(
			"arguments"	=> array(),
			"template"	=> "templates/facebook/prompt-account-link",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
	);
}

function fb_preprocess_fb_share(&$vars)
{
	module_load_include("inc", "fb");
	$type = $vars['share_type'];
	
	if ($type == "node")
	{
		$vars['share_params'] = json_encode(fb_get_share_params(node_load($vars['share_id'])));
	}
	elseif ($type == "collection" && module_exists("collection"))
	{
		$vars['share_params'] = json_encode(fb_get_collection_share_params(collection_load($vars['share_id']), "share_collection"));
	}
}

function fb_network_get_userinfo($uid)
{
	$sql = "SELECT `fb_id`
			FROM {fb_users}
			WHERE `uid`=%d";
	if (!($fb_id = db_result(db_query($sql, $uid))))
	{
		return array();
	}
	
	return array(
		"fb_id"	=> array(
			$fb_id,
		)
	);
}

function fb_profile_ext_external_account_data()
{
	return array(
		"fb_id"	=> array(
			"id"	=> "fb",
			"name"	=> "Facebook",
			"title"	=> t("Facebook Account"),
			"remove"=> array(
				"class"	=> "fb_remove_account",
			),
			"add"	=> array(
				"multiple"	=> false,
				"class"		=> "fb_link_account",
			),
		),
	);
}

function fb_collections_insert($collection)
{
	module_load_include("inc", "fb");
	fb_register_prompt("create_collection", $collection['cid'], "collection");
}

function fb_collection_update($uid, $cids)
{
	$cid = array_shift($cids);
	module_load_include("inc", "fb");
	fb_register_prompt("share_collection", $cid, "collection");
}

function fb_network_find_friends($uid, &$potentials, $existing)
{
	module_load_include("inc", "fb");
	
	if (!(fb_user_has_fb($uid)))
	{
		$link_account_args = array(
			"attributes"	=> array(
				"class"	=> "fb_link_account",
			),
		);
		
		$t_args = array(
			"!fb_link" => l(t("link your Facebook account"), "fb/add-account", $link_account_args),
		);
		
		drupal_set_message(t("Please !fb_link to see which of your Facebook friends are using Vibio", $t_args));
		return false;
	}
	elseif (!($friends = fb_get_friends($uid)))
	{
		$fb_login_refresh = array(
			"attributes"	=> array(
				"class"	=> "fb_login fb_refresh fb_reload",
			),
		);
		$t_args = array(
			"!fb_refresh" => l(t("refresh your Facebook session"), "user/{$uid}/external-accounts", $fb_login_refresh),
		);
		
		drupal_set_message(t("Your Facebook session has expired, please !fb_refresh to see which of your Facebook friends are using Vibio", $t_args));
		return false;
	}
	
	$friends = $friends->data;
	foreach ($friends as $friend)
	{
		if (!($friend_uid = fb_user_exists($friend->id)) || // not on Vibio
			in_array($friend_uid, $existing) || // already friends
			array_key_exists($friend_uid, $potentials)) // already in the list of potential friends
		{
			continue;
		}
		
		$potential = new stdClass;
		$potential->info = _network_get_userinfo($friend_uid);
		$potential->src = "fb";
		$potential->link = fb_profile_link($friend->id);
		$potentials[$friend_uid] = $potential;
	}
}

function fb_preprocess_network_potential_friend(&$vars)
{
	if ($vars['friend']->src == "fb")
	{
		$link = t("View !user's Facebook profile", array("!user" => $vars['friend']->info['name']));
		$vars['friend_src_link'] = "
			<a href='{$vars['friend']->link}' target='_blank'>
				$link
			</a>
		";
	}
}
?>