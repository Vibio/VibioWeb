<?php
define("PRODUCT_SEARCH_RESULTS_PER_PAGE", 40);
define("PRODUCT_DETAIL_SNIPPET_LENGTH", 256);
// PRODUCT_SEARCH_RESULTS_PER_PAGE does this do anything?  
// Seems to be it's all done in search.module, hard-coded
function product_perm()
{
	return array(
		"product admin",
	);
}

function product_views_api()
{
	return array(
		"api"	=> 2,
	);
}

function product_menu()
{
	return array(
		"admin/settings/product-catalog"	=> array(
			"title"				=> "Product Catalog",
			"description"		=> "Change settings related to the product catalog",
			"page callback"		=> "drupal_get_form",
			"page arguments"	=> array("product_admin"),
			"access arguments"	=> array("product admin"),
			"file"				=> "product.forms.php",
		),
		"product/%node/add-to-inventory"	=> array(
			"title callback"	=> "_product_inventory_add_title",
			"title arguments"	=> array(1),
			"page callback"		=> "product_add_to_inventory",
			"page arguments"	=> array(1),
			"access arguments"	=> array("create vibio_item content"),
			"file"				=> "product.pages.php",
			"type"				=> MENU_CALLBACK,
		),
		"product/%node/add-to-inventory/quick"	=> array(
			"title callback"	=> "_product_inventory_add_title",
			"title arguments"	=> array(1),
			"page callback"		=> "product_add_to_inventory",
			"page arguments"	=> array(1, true),
			"access arguments"	=> array("create vibio_item content"),
			"file"				=> "product.pages.php",
			"type"				=> MENU_CALLBACK,
		),
		"product/add"			=> array(
			"title"				=> "Add New Product",
			"page callback"		=> "product_add_new",
			"access arguments"	=> array("create product content"),
			"file"				=> "product.pages.php",
			"type"				=> MENU_CALLBACK,
		),
		"product/get-owners"				=> array(
			"page callback"		=> "_product_get_owners_page",
			"access arguments"	=> array("access content"),
			"file"				=> "product.pages.php",
			"type"				=> MENU_CALLBACK,
		),
		"product/ajax/inventory-add" => array(
			"page callback"		=> "product_ajax_add",
			"access arguments"	=> array("create vibio_item content"),
			"file"				=> "product.pages.php",
			"type"				=> MENU_CALLBACK,
		),
		"product/ajax/inventory-add/save" => array(
			"page callback"		=> "product_ajax_add_complete",
			"access arguments"	=> array("create vibio_item content"),
			"file"				=> "product.pages.php",
			"type"				=> MENU_CALLBACK,
		),
	);
}

function product_external_search($args)
{	
	if (!($provider = variable_get("product_source", false)) || !function_exists("{$provider}_product_search"))
	{
		return false;
	}
	if (!is_array($keys))
	{
		$args = array("keywords"	=> $args);
	}
	
	module_load_include("inc", "product");
	drupal_add_js("themes/vibio/js/product.js");
	product_set_external_search(true, true);
	
	$func = "{$provider}_product_search";
	$args['keywords'] = _product_remove_options($args['keywords']);
// example $func = vibio_amazon_product_search
	return $func($args);
}

function product_external_search_modify_search_query(&$sql)
{
	if (!($provider = variable_get("product_source", false)) || !function_exists("{$provider}_product_search_modify_search_query"))
	{
		return false;
	}
	
	$func = "{$provider}_product_search_modify_search_query";
	$func($sql);
}

function product_nodeapi(&$node, $op, $a3=null, $a4=null)
{
	if ($node->type == "vibio_item")
	{
		switch ($op)
		{
			case "insert":
				if (isset($node->product_product_nid))
				{
					$sql = "REPLACE INTO {product_items}
							SET `product_nid`=%d, `item_nid`=%d";
					db_query($sql, $node->product_product_nid, $node->nid);
				}
				break;
			case "delete":
				$sql = "DELETE FROM {product_items}
						WHERE `item_nid`=%d";
				db_query($sql, $node->nid);
				break;
			case "view":
				$sql = "SELECT `product_nid`
						FROM {product_items}
						WHERE `item_nid`=%d";
				$node->product_nid = db_result(db_query($sql, $node->nid));
			default:
				break;
		}
	}
	
	if ($node->type == "product")
	{
		switch ($op)
		{
			case "insert":
				if (product_get_autoadd())
				{
					module_load_include("php", "product", "product.pages");
					drupal_get_messages();
					product_add_to_inventory($node, true);
				}
				break;
			case "update index":
				return theme("product_display", $node);
			case 'search result':
				module_load_include("inc", "product");
				
				return array(
					"image"	=> _product_get_image($node->nid, true),
				);
		}
	}
}

function product_theme()
{
	return array(
		"product_add_product_link"	=> array(
			"arguments"	=> array(),
			"template"	=> "templates/product/add-product-link",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
		"product_amazon_display"	=> array(
			"arguments"	=> array("node"	=> false, "page" => false),
			"template"	=> "templates/product/amazon-display",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
		"product_display"	=> array(
			"arguments"	=> array("node"	=> false, "page" => false),
			"template"	=> "templates/product/display",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
		"product_owners"	=> array(
			"arguments"	=> array("type"	=> "network", "data" => array()),
			"template"	=> "templates/product/owners",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
		"product_owner"		=> array(
			"arguments"	=> array("item"	=> array()),
			"template"	=> "templates/product/owner",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
		// Create the have link/button, that's all.
		"product_inventory_add"	=> array(
			"arguments"	=> array("nid"	=> false, "searchcrumb" => ""),
			"template"	=> "templates/product/inventory-add",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
		// Create the want link/button, that's all.
		"product_inventory_want"=> array(
			"arguments"	=> array("nid"	=> false),
			"template"	=> "templates/product/inventory-want",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
		"product_inventory_manage_link"	=> array(
			"arguments"	=> array("product"	=> false, "searchcrumb" => ""),
			"template"	=> "templates/product/inventory-manage-link",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
	);
}

function product_preprocess_product_amazon_display(&$vars)
{
	drupal_add_css("themes/vibio/css/product.css");
	drupal_add_js("themes/vibio/js/product.js");
}

function product_preprocess_product_display(&$vars)
{
	drupal_add_css("themes/vibio/css/product.css");
	drupal_add_js("themes/vibio/js/product.js");
}

function product_preprocess_node(&$vars)
{
	if (in_array($vars['node']->type, array("product", "vibio_item")))
	{
		module_load_include("inc", "product");
	}
}

function product_form_vibio_item_node_form_alter(&$form, &$state)
{
	$product = node_load($form['#node']->product_nid);
	
	if (!$product)
	{
		return;
	}
	
	$form['title']['#default_value'] = $product->title;
	$form['product_product_nid'] = array(
		"#type"	=> "value",
		"#value"=> $form['#node']->product_nid,
	);
}

function product_form_alter(&$form, &$state, $id)
{
	if ($id == "product_node_form")
	{
		_vibio_item_unset($form, "product");
		_vibio_item_defaults($form, "product");
	}
}

function product_reports_daily_cron($last_run)
{
	$sql = "SELECT td.`name` category, COUNT(*) items_created
			FROM {term_data} td JOIN {term_node} tn JOIN {product_items} pi JOIN {node} n
				ON td.`tid`=tn.`tid`
				AND pi.`product_nid`=tn.`nid`
				AND pi.`item_nid`=n.`nid`
			WHERE n.`type`='vibio_item'
				AND n.`created` >= %d
			GROUP BY td.`name`
			ORDER BY COUNT(*) DESC";
	$res = db_query($sql, $last_run);
	
	while ($row = db_fetch_object($res))
	{
		reports_log("items", $row->items_created, $row->category);
	}
	
	if ($employee_role = variable_get("reports_employee_role", false))
	{
		$sql = "SELECT td.`name` category, COUNT(*) items_created
				FROM {term_data} td JOIN {term_node} tn JOIN {product_items} pi JOIN {node} n
					ON td.`tid`=tn.`tid`
					AND pi.`product_nid`=tn.`nid`
					AND pi.`item_nid`=n.`nid`
				WHERE n.`type`='vibio_item'
					AND n.`created` >= %d
					AND n.`uid` NOT IN (
						SELECT `uid`
						FROM {users_roles}
						WHERE `rid`=%d
					)
				GROUP BY td.`name`
				ORDER BY COUNT(*) DESC";
		$res = db_query($sql, $last_run, $employee_role);
		
		while ($row = db_fetch_object($res))
		{
			reports_log("items noemployee", $row->items_created, $row->category);
		}
	}
}

function _product_remove_options($keys)
{
	return preg_replace('/(^| )([a-z0-9_]+):(.*)( |$)/i', '', $keys);
}

function _product_inventory_add_title($product)
{
	return t("Add \"!product\" to your inventory", array("!product" => $product->title));
}

function product_user_owns_product($product_id, $uid=false)
{
	if (!$uid)
	{
		global $user;
		$uid = $user->uid;
	}
	
	$sql = "SELECT n.`nid`
			FROM {node} n JOIN {product_items} pi
				ON n.`nid`=pi.`item_nid`
			WHERE n.`uid`=%d
				AND pi.`product_nid`=%d";
	return db_result(db_query($sql, $uid, $product_id));
}

/* warning: this uses search text for functional if
 * The point of this is something to do with searches with no results. 
 * Experiment when time
 * !!! I think I wrote some code for blank searches to. -Stephen
 */
function product_preprocess_box(&$vars)
{
	if ($vars['title'] == t("Your search yielded no results") /* ouch */ && arg(0) == "search" && arg(1) == "vibio_item")
	{
		if (!$_GET['external_product_search'])
		{
			module_load_include("inc", "product");
			product_set_external_search_page_offset(0);
			drupal_goto(substr(urldecode(request_uri()), 1), "external_product_search=1");
		}
		else
		{
			$vars['content'] .= theme("product_add_product_link");
		}
	}
}

/* how does this dance with theme vibio_preprocess_search_results ? */
function product_preprocess_search_results(&$vars)
{
	if ($vars['type'] == "vibio_item")
	{
		global $pager_page_array, $pager_total;

		
		module_load_include("inc", "product");
		drupal_add_css("themes/vibio/css/product.css");
		drupal_add_js("themes/vibio/js/product.js");
		
		$is_external = product_set_external_search();
//PRODUCT_SEARCH_RESULTS_PER_PAGE does this do anything?  Is the idea that if you have a full page of results in $vars['results'] 
// which is either local, or local+Amazone but not eBay, or ???, then we don't need to do this next search?
		
		if (!$is_external && variable_get("product_append_external", false) && (count($vars['results']) < PRODUCT_SEARCH_RESULTS_PER_PAGE || $_GET['page'] == $pager_total[0] - 1))
		{
			product_set_external_search_page_offset($pager_total[0] - 1);
			$external_results = product_external_search(_vibio_item_search_keys());
			
			$vars['other_results'] = "";
			if (!empty($external_results))
			{	
				foreach ($external_results as $result)
				{
					$vars['other_results'] .= theme("search_result", $result, "vibio_item"); /* stephen: what is this?  Ebay, or Ebay and Amazon? */
				}
				
				$vars['pager'] = theme("pager");
			}
			
			if ($_GET['page'] > product_set_external_search_page_offset())
			{
				$vars['search_results'] = "";    /* has this been tested */
			}
		}
		/*elseif (variable_get("product_append_external", false))
		{
			
		}*/
	}
}

/* two functions dealing with have-want, one for search, one for view */
function product_preprocess_search_result(&$vars)
{
	if ($vars['type'] == "vibio_item")
	{
		$item_nid = product_user_owns_product($vars['result']['node']->nid);
		$vars['search_links'] .= $item_nid ? l(t("You Own This!"), "node/{$item_nid}") : theme("product_inventory_add", $vars['result']['node']->nid);
		$vars['search_links'] .= $item_nid ? "" : theme("product_inventory_want", $vars['result']['node']->nid); 
	}
}
function product_have_want($nid)
{
  $vars = array();  // not a preprocess function despite similiarities
	$item_nid = product_user_owns_product($nid);
	$search_links .= $item_nid ? l(t("You Own This!"), "node/{$item_nid}") : theme("product_inventory_add", $nid); // theme just creates the button.
	$search_links .= $item_nid ? "" : theme("product_inventory_want", $nid); 
	return $search_links;
}

function product_vibio_item_images($item_nid)
{
	module_load_include("inc", "product");
	
	if (!($nid = _product_nid_from_item($item_nid)))
	{
		return array();
	}
	
	return product_images($nid);
}

function product_set_autoadd($val=true)
{
	$_SESSION['product']['auto_add'] = $val;
}

function product_get_autoadd($clear=true)
{
	$val = $_SESSION['product']['auto_add'];

	if ($clear)
		unset($_SESSION['product']['auto_add']);

	return $val;
}
?>
