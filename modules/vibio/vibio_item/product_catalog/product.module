<?php
function product_perm()
{
	return array(
		"product admin",
	);
}

function product_menu()
{
	return array(
		"admin/settings/product-catalog"	=> array(
			"title"				=> "Product Catalog",
			"description"		=> "Change settings related to the product catalog",
			"page callback"		=> "drupal_get_form",
			"page arguments"	=> array("product_admin"),
			"access arguments"	=> array("product admin"),
			"file"				=> "product.forms.php",
		),
		"product/%node/add-to-inventory"	=> array(
			"title callback"	=> "_product_inventory_add_title",
			"title arguments"	=> array(1),
			"page callback"		=> "product_add_to_inventory",
			"page arguments"	=> array(1),
			"access arguments"	=> array("create vibio_item content"),
			"file"				=> "product.pages.php",
			"type"				=> MENU_CALLBACK,
		),
		"product/get-owners"				=> array(
			"page callback"		=> "_product_get_owners_page",
			"access arguments"	=> array("access content"),
			"file"				=> "product.pages.php",
			"type"				=> MENU_CALLBACK,
		),
	);
}

function product_external_search($args)
{
	if (!($provider = variable_get("product_source", false)) || !function_exists("{$provider}_product_search"))
	{
		return false;
	}
	if (!is_array($keys))
	{
		$args = array("keywords"	=> $args);
	}
	
	$func = "{$provider}_product_search";
	$args['keywords'] = _product_remove_options($args['keywords']);
	
	return $func($args);
}

function product_nodeapi(&$node, $op, $a3=null, $a4=null)
{
	if ($node->type == "vibio_item")
	{
		switch ($op)
		{
			case "insert":
				if (isset($node->product_product_nid))
				{
					$sql = "REPLACE INTO {product_items}
							SET `product_nid`=%d, `item_nid`=%d";
					db_query($sql, $node->product_product_nid, $node->nid);
				}
				break;
			case "delete":
				$sql = "DELETE FROM {product_items}
						WHERE `item_nid`=%d";
				db_query($sql, $node->nid);
				break;
			case "view":
				$sql = "SELECT `product_nid`
						FROM {product_items}
						WHERE `item_nid`=%d";
				$node->product_nid = db_result(db_query($sql, $node->nid));
			default:
				break;
		}
	}
	
	if ($node->type == "product")
	{
		switch ($op)
		{
			case "update index":
				return theme("product_display", $node);
		}
	}
}

function product_theme()
{
	return array(
		"product_amazon_display"	=> array(
			"arguments"	=> array("node"	=> false, "page" => false),
			"template"	=> "templates/product/amazon-display",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
		"product_owners"	=> array(
			"arguments"	=> array("type"	=> "network", "data" => array()),
			"template"	=> "templates/product/owners",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
		"product_owner"		=> array(
			"arguments"	=> array("item"	=> array()),
			"template"	=> "templates/product/owner",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
	);
}

function product_preprocess_product_display(&$vars)
{
	drupal_add_css("sites/all/themes/vibio/css/product.css");
	drupal_add_js("sites/all/themes/vibio/js/product.js");
}

function product_form_vibio_item_node_form_alter(&$form, &$state)
{
	$product = node_load($form['#node']->product_nid);
	
	if (!$product)
	{
		return;
	}
	
	$form['title']['#default_value'] = $product->title;
	$form['product_product_nid'] = array(
		"#type"	=> "value",
		"#value"=> $form['#node']->product_nid,
	);
}

function _product_remove_options($keys)
{
	return preg_replace('/(^| )([a-z0-9_]+):(.*)( |$)/i', '', $keys);
}

function _product_inventory_add_title($product)
{
	return t("Add \"!product\" to your inventory", array("!product" => $product->title));
}

function product_user_owns_product($product_id, $uid=false)
{
	if (!$uid)
	{
		global $user;
		$uid = $user->uid;
	}
	
	$sql = "SELECT n.`nid`
			FROM {node} n JOIN {product_items} pi
				ON n.`nid`=pi.`item_nid`
			WHERE n.`uid`=%d
				AND pi.`product_nid`=%d";
	return db_result(db_query($sql, $uid, $product_id));
}
?>