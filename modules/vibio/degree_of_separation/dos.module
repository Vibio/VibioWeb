<?php
require_once("dijkstra.class.php");

define("DOS_DEFAULT_DEPTH", 3);
define("DOS_INFINITY", 5000);

function dos_perm()
{
	return array(
		"dos admin",
	);
}

function dos_menu()
{
	return array(
		"admin/settings/degree-of-separation"	=> array(
			"title"				=> "Degree of Separation",
			"description"		=> "Manage the way degree of separation behaves",
			"page callback"		=> "drupal_get_form",
			"page arguments"	=> array("dos_admin"),
			"access arguments"	=> array("dos admin"),
			"type"				=> MENU_NORMAL_ITEM,
			"file"				=> "forms.inc.php",
		),
	);
}

//dijkstra
function dos_get($target_uid, $type=false, $max_depth=false)
{
	global $user;
	
	if ($target_uid == $user->uid)
	{
		return false;
	}
	elseif (!$type && !($type = variable_get("dos_relation_type", false)))
	{
		return array();
	}
	
	$target_uid = (int) $target_uid;
	$max_depth = $max_depth ? $max_depth : variable_get("dos_max_depth", DOS_DEFAULT_DEPTH);
	$network = network_get($user->uid, $type, $max_depth);
	
	if (!array_key_exists($target_uid, $network))
	{
		return array();
	}
	
	$paths = array();
	$map = array();
	
	foreach ($network as $uid => $data)
	{
		foreach ($data['friends'] as $friend_id)
		{
			$from = min($uid, $friend_id);
			$to = max($uid, $friend_id);
			$dup_check = "{$from}_{$to}";
			
			if (!in_array($dup_check, $paths))
			{
				$paths[] = $dup_check;
				$map[$from][$to] = $map[$to][$from] = 1;
			}
		}
	}
	
	$dijkstra = new Dijkstra($map, DOS_INFINITY);
	$dijkstra->findShortestPath($user->uid, $target_uid);
	$path = array();
	
	foreach ($dijkstra->getResults($target_uid, true) as $p)
	{
		$path[$p] = $network[$p]['name'];
	}
	
	return $path;
}

function dos_preprocess_user_profile(&$vars)
{
	$args = explode("/", $_GET['q']);
	$uid = (int) $args[1];
	
	$vars['profile']['dos'] = dos_get($uid);
}
?>