<?php
function vviews_views_api()
{
	return array(
		"api"	=> 3, // stephen: was 2, not sure what this all does
	);
}

function vviews_user_relationships($op, &$rel)
{
	switch ($op)
	{
		case "approve":
			$event = "make a connection";
			_vviews_clear_cache($rel->requestee_id, "user_heartbeat_activity", $event);
			_vviews_clear_cache($rel->requester_id, "user_heartbeat_activity", $event);
		case "remove": //note the intentional omission of a break statement, since we also want to clear these on additions
			$event = "remove a connection";
//			_vviews_clear_cache($rel->requestee_id, "user_relationships_browser", $event);
//			_vviews_clear_cache($rel->requester_id, "user_relationships_browser", $event);
			break;
		default:
			break;
	}
}

function vviews_user($op, &$edit, &$u, $category=null)
{
	switch ($op)
	{
		case "update":
			_vviews_clear_cache($u->uid, "user_heartbeat_activity", "Account update. Possible privacy settings change.");
			break;
	}
}

function vviews_nodeapi(&$node, $op, $a3=null, $a4=null)
{
	if ($node->type == "vibio_item")
	{
		switch ($op)
		{
			case "insert":
			case "update":
				$event = "create/modify item";
				_vviews_clear_cache($node->uid, "user_collections", $event);
				_vviews_clear_cache($node->uid, "user_heartbeat_activity", $event);
				_vviews_clear_cache($node->uid, "user_inventory", $event);
				break;
			case "delete":
				_vviews_clear_cache($node->uid, "user_inventory", "delete item");
				_vviews_clear_cache($node->uid, "user_collections", "delete item");
				break;
			default:
				break;
		}
	}
}

function vviews_badge_give_badge($uid, $badge)
{
	_vviews_clear_cache($uid, "user_heartbeat_activity", "badge_give_badge");
}

function vviews_privacy_update_user($form, $user, $category)
{
	if ($category == "account")
	{
		_vviews_clear_cache($user->uid, "user_heartbeat_activity", "privacy settings change");
	}
}

function vviews_comment(&$comment, $op)
{
	switch ($op)
	{
		case "publish":
			_vviews_clear_cache($old_owner_uid, "user_heartbeat_activity", "creating comment");
			break;
		default:
			break;
	}
}

function vviews_collection_save($collection)
{
	$event = "saving a collection";
	$args = array(
		$collection['uid'],
		$collection['cid'],
	);
	
	_vviews_clear_cache($collection['uid'], "user_collections", $event);
	_vviews_clear_cache($args, "user_collection", $event);
	_vviews_clear_cache($collection['uid'], "user_heartbeat_activity", $event);
}

function vviews_collection_update($uid, $cids)
{
	foreach ($cids as $cid)
	{
		if ($cid)
		{
			_vviews_clear_cache(array($uid, $cid), "user_collection", "updating a collection");
		}
	}
}

function vviews_collection_delete($uid, $new_cid, $deleted_cid)
{
	$event = "collection delete";
	
	if ($new_cid)
	{
		_vviews_clear_cache(array($uid, $new_cid), "user_collection", $event);
	}
	
	_vviews_clear_cache($uid, "user_collections", $event);
	_vviews_clear_cache($uid, "user_heartbeat_activity", $event); //band aid fix. why should i have to clear your heartbeat?
}

function vviews_collection_delete_item($uid, $cid, $nid)
{
	_vviews_clear_cache(array($uid, $cid), "user_collection", "deleting an item.");
}

function vviews_offer2buy_complete_actions($old_owner_uid, $node)
{
	$event = "offer2buy transfer item";
	
	//only have to clear the old owners cache, the new owners cache will be cleared through hook_nodeapi
	_vviews_clear_cache($old_owner_uid, "user_inventory", $event);
	_vviews_clear_cache($old_owner_uid, "user_collections", $event);
}

function _vviews_clear_cache($args, $view_name, $event="")
{
	if (!is_array($args))
	{
		$args = array($args);
	}
	
	$cid = "{$view_name}:".implode(":", $args);
	cache_clear_all($cid, "cache_views_data", true); //because of paging, we always want a wildcard clear
	watchdog("vviews_clear", t("Clearing cache with cid !cid from event \"!event\"", array("!cid" => $cid, "!event" => $event)));
}
?>
