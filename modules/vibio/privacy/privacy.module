<?php
define("PRIVACY_ONLYME", 4);
define("PRIVACY_CONNECTION", 3);
define("PRIVACY_AUTHENTICATED", 2);
define("PRIVACY_PUBLIC", 1);

function privacy_perm()
{
	return array(
		"privacy admin",
	);
}

function privacy_menu()
{
	return array(
		"admin/settings/privacy/mass-update"	=> array(
			"title"				=> "Set Privacy Settings",
			"description"		=> "Set the privacy settings for all users",
			"page callback"		=> "drupal_get_form",
			"page arguments"	=> array("privacy_mass_set"),
			"access arguments"	=> array("privacy admin"),
			"file"				=> "privacy.pages.inc",
			"type"				=> MENU_NORMAL_ITEM,
		),
	);
}

function privacy_user($op, &$edit, &$account, $category=null)
{
	switch ($op)
	{
		case "categories":
			return array(array(
				"name"	=> "privacy_settings",
				"title"	=> t("Privacy Settings"),
				"weight"=> 1,
			));
		case "form":
			if ($category != "privacy_settings")
			{
				return;
			}
			$form['privacy_item_default'] = _privacy_fieldset($account->uid, "account_setting", "item_default", true, t("Default Item Privacy"), t("This is the setting that will be automatically populated for items"));
			$form['heartbeat_activity_settings_select'] = _theme_user_message_select_form(t('Activity Stream'), isset($edit['heartbeat_activity_settings']) ? $edit['heartbeat_activity_settings'] : NULL);
			return $form;
		case "insert":
			module_invoke_all("privacy_new_user", $edit, $account, $category);
		case "update":
			module_invoke_all("privacy_update_user", $edit, $account, $category);
			break;
		case "delete":
			privacy_del_user($account->uid);
		default:
			break;
	}
}

function privacy_nodeapi(&$node, $op, $a3=null, $a4=null)
{
	if ($node->type == "vibio_item")
	{
		global $user;
		
		switch ($op)
		{
			case "load":
				$node->privacy_setting = privacy_get($user->uid, "node", $node->nid);
				break;
			case "delete":
				privacy_del($user->uid, "node", $node->nid);
				break;
			case "update":
			case "insert":
				privacy_set($user->uid, "node", $node->nid, $node->privacy_setting);
				break;
			default:
				break;
		}
	}
}

function privacy_form_vibio_item_node_form_alter(&$form, &$state)
{
	if ($form['#node']->nid)
	{
		$default_type = "node";
		$default_typeid = $form['#node']->nid;
	}
	else
	{
		$default_type = "account_setting";
		$default_typeid = "item_default";
	}
	
	$form = array_merge_recursive($form, _privacy_form($form['#node']->uid, $default_type, $default_typeid));
}

function privacy_form_collection_edit_alter(&$form, &$state)
{
	global $user;
	
	$form = array_merge_recursive($form, _privacy_form($user->uid, "collection", $form['cid']['#value']));
	$form['privacy_settings']['#weight'] = 9;
}

function privacy_collection_save($vals)
{
	global $user;
	$privacy_setting = isset($vals['privacy_setting']) ? $vals['privacy_setting'] : PRIVACY_ONLYME;
	privacy_set($user->uid, "collection", $vals['cid'], $privacy_setting);
}

function privacy_form_user_profile_form_alter(&$form, &$state)
{
	if ($form['_category']['#value'] == "account")
	{
		unset($form['heartbeat_activity_settings_select']);
		return;
	}
	elseif ($form['_category']['#value'] != "privacy_settings" || empty($form['heartbeat_activity_settings_select']['heartbeat_activity_settings']))
	{
		return;
	}
	
	$hidden_messages = _hbi_hidden_messages();
	
	//hbi_privacy_update_user() is in charge of saving these values.
	foreach ($form['heartbeat_activity_settings_select']['heartbeat_activity_settings'] as $type_id => $field)
	{
		if (!is_array($field))
		{
			continue;
		}
		elseif (in_array($type_id, $hidden_messages))
		{
			unset($form['heartbeat_activity_settings_select']['heartbeat_activity_settings'][$type_id]);
			continue;
		}
		
		$default = privacy_get($form['_account']['#value']->uid, "heartbeat_messages", $type_id);
		$field = $form['heartbeat_activity_settings_select']['heartbeat_activity_settings'][$type_id]['access'];
		$field['#options'] = _privacy_options();
		$field['#default_value'] = $default;
		$form['heartbeat_activity_settings_select']['heartbeat_activity_settings'][$type_id]['access'] = $field;
	}
}

function privacy_privacy_update_user($form, $u, $category)
{
	if ($category != "privacy_settings" || !isset($form['privacy_item_default']))
	{
		return;
	}
	$p = $form['privacy_item_default'];
	
	privacy_set($p['privacy_uid'], $p['privacy_type'], $p['privacy_typeid'], $p['privacy_setting']);
}

function privacy_views_api()
{
	return array(
		"api"	=> 2,
	);
}

function _privacy_fieldset($uid=false, $type="node", $type_id=false, $as_tree=false, $custom_title=false, $custom_description=false)
{
	$fieldset = array(
		"#title"		=> $custom_title ? $custom_title : t("Privacy Settings"),
		"#description"	=> $custom_description ? $custom_description : t("This setting controls who is allowed to see this information."),
		"#type"			=> "fieldset",
		"#collapsible"	=> false,
		"#tree"			=> $as_tree
	);
	
	return array_merge($fieldset, _privacy_form($uid, $type, $type_id, $custom_title));
}

function _privacy_form($uid=false, $type="node", $type_id=false, $custom_title=false)
{
	return array(
		"privacy_setting"	=> array(
			"#title"		=> $custom_title ? $custom_title : t("Privacy Settings"),
			"#type"			=> "select",
			"#options"		=> _privacy_options(),
			"#default_value"=> privacy_get($uid, $type, $type_id),
		),
		"privacy_type"		=> array(
			"#type"	=> "value",
			"#value"=> $type,
		),
		"privacy_uid"		=> array(
			"#type"	=> "value",
			"#value"=> $uid,
		),
		"privacy_typeid"	=> array(
			"#type"	=> "value",
			"#value"=> $type_id,
		),
		"#submit"			=> array(
			"_privacy_form_submit",
		),
	);
}

function _privacy_form_submit($form, &$state)
{
	$vals = $state['values'];
	if ($vals['privacy_uid'] && $vals['privacy_typeid']) //if set, then whatever it is must have already defined these values, so we have everything we need
	{
		privacy_set($vals['privacy_uid'], $vals['privacy_type'], $vals['privacy_typeid'], $vals['privacy_setting']);
	}
}

function privacy_get($uid, $type, $type_id)
{
	if (!$uid || !$type || !$type_id)
	{
		return false;
	}
	
	$sql = "SELECT `setting`
			FROM {privacy_settings}
			WHERE `uid`=%d
				AND `type`='%s'
				AND `type_id`='%s'";
	return db_result(db_query($sql, $uid, $type, $type_id));
}

function privacy_set($uid, $type, $type_id, $setting)
{
	$sql = "REPLACE INTO {privacy_settings}
			SET `uid`=%d, `type`='%s', `type_id`='%s', `setting`=%d";
	db_query($sql, $uid, $type, $type_id, $setting);
}

function privacy_del($uid, $type, $type_id)
{
	$sql = "DELETE FROM {privacy_settings}
			WHERE `uid`=%d
				AND `type`='%s'
				AND `type_id`='%s'";
	db_query($sql, $uid, $type, $type_id);
}

function privacy_del_user($uid)
{
	$sql = "DELETE FROM {privacy_settings}
			WHERE `uid`=%d";
	db_query($sql, $uid);
}

function privacy_get_access_level($to_uid, $from_uid=null)
{
	static $privacy_access_levels = array();
	
	if ($from_uid == null)
	{
		global $user;
		$from_uid = $user->uid;
	}
	
	if (!$from_uid) //anonymous user
	{
		return PRIVACY_PUBLIC;
	}
	elseif ($from_uid == $to_uid)
	{
		return PRIVACY_ONLYME;
	}
	
	if (!$privacy_access_levels[$from_uid][$to_uid])
	{
		$network = network_get($from_uid, false, 1);
		$privacy_access_levels[$from_uid][$to_uid] = array_key_exists($to_uid, $network) ? PRIVACY_CONNECTION : PRIVACY_AUTHENTICATED;
	}
	
	return $privacy_access_levels[$from_uid][$to_uid];
}

function privacy_offer2buy_complete_actions($old_uid, $node)
{
	privacy_del($old_uid, "node", $node->nid);
	privacy_set($node->uid, "node", $node->nid, PRIVACY_ONLYME);
}

function privacy_product_inventory_quick_add($form_vals)
{
	global $user;
	$privacy_setting = privacy_get($user->uid, "account_setting", "item_default");
	
	return array(
		"privacy_setting" => $privacy_setting ? $privacy_setting : PRIVACY_PUBLIC,
	);
}

function privacy_collection_load($collection)
{
	return array(
		"privacy"	=> privacy_get($collection['uid'], "collection", $collection['cid']),
	);
}

function _privacy_options()
{
	return array(
		PRIVACY_PUBLIC			=> t("Anyone"),
		PRIVACY_AUTHENTICATED	=> t("Only users with Vibio accounts"),
		PRIVACY_CONNECTION		=> t("Only my Friends"),
		PRIVACY_ONLYME			=> t("Private to me"),
	);
}
?>