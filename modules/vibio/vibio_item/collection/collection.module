<?php
define("COLLECTION_DESCRIPTION_MAX_LENGTH", 65535);
define("COLLECTION_TITLE_MAX_LENGTH", 255);
define("COLLECTION_ITEM_PREVIEW_MAX_TITLE_LENGTH", 16);

function collection_perm()
{
	return array(
		"collections user",
		"collections viewer",
	);
}

function collection_menu()
{
	return array(
		"collections/manage"		=> array(
			"title"				=> "Manage Your Collections",
			"page callback"		=> "collection_manage",
			"access arguments"	=> array("collections user"),
			"file"				=> "collection.pages.inc",
			"type"				=> MENU_SUGGESTED_ITEM,
		),
		"collections/manage/%collection"	=> array(
			"title callback"	=> "collection_title",
			"title arguments"	=> array(2),
			"page callback"		=> "drupal_get_form",
			"page arguments"	=> array("collection_edit", 2),
			"access callback"	=> "collection_manage_collection_access",
			"access arguments"	=> array(2),
			"file"				=> "collection.pages.inc",
			"type"				=> MENU_CALLBACK,
		),
		"collections/new"		=> array(
			"title"				=> "New Collection",
			"page callback"		=> "drupal_get_form",
			"page arguments"	=> array("collection_edit"),
			"access arguments"	=> array("collections user"),
			"file"				=> "collection.pages.inc",
			"type"				=> MENU_CALLBACK,
		),
		"collections/%collection"	=> array(
			"title callback"	=> "collection_title",
			"title arguments"	=> array(1),
			"page callback"		=> "collection_view_collection",
			"page arguments"	=> array(1),
			"access callback"	=> "collection_access_collection",
			"access arguments"	=> array(1),
			"file"				=> "collection.pages.inc",
			"type"				=> MENU_CALLBACK,
		),
		"collections/%/view-all"	=> array(
			"title"				=> "All Items",
			"page callback"		=> "collection_view_all_user_items",
			"page arguments"	=> array(1),
			"access arguments"	=> array("collections viewer"),
			"file"				=> "collection.pages.inc",
			"type"				=> MENU_CALLBACK,
		),
	);
}

function collection_block($op="list", $delta=0, $edit=array())
{
	switch ($op)
	{
		case "list":
			return array(
        "related_collection" => array(
          "info" => t("Related Collection"),
          "cache"=> BLOCK_CACHE_PER_PAGE,
        ),
				"random_collection"	=> array(
					"info"	=> t("Random Collection"),
					"cache"	=> BLOCK_NO_CACHE,
				),
			);
		case "view":
      module_load_include("inc", "collection", "collection.pages");
      module_load_include('inc', 'collection');
			switch ($delta)
			{
        case "related_collection":
          return array(
            "subject" => "",
            "content" => collection_display_related(),
          );
				case "random_collection":
					global $user;


					return array(
						"subject"	=> "",
						"content"	=> collection_random_collection($user),
					);
			}
	}
}

function collection_theme(&$existing)
{
	return array(
		"collection_list_item" => array(
			"arguments"	=> array("collection" => array(), "access" => false, "show_preview" => true),
			"template"	=> "templates/collections/collection",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
		"collection_list_item_preview"	=> array(
			"arguments"	=> array("item" => array()),
			"template"	=> "templates/collections/collection-item-preview",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
		"collection_view_collection"	=> array(
			"arguments"	=> array("collection_owner" => 1, "collection_display"	=> "", "collection_sidebar" => array()),
			"template"	=> "templates/collections/collection-view",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
		"collection_sidebar_item"		=> array(
			"arguments"	=> array("collection_item" => array()),
			"template"	=> "templates/collections/sidebar-item",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
		"collection_sidebar_collection"	=> array(
			"arguments"	=> array("collection" => array(), "item_html" => ""),
			"template"	=> "templates/collections/sidebar-collection",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
		"collection_random_collection"	=> array(
			"arguments"	=> array("collection" => false),
			"template"	=> "templates/collections/random-collection",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
		"collection_image" => array(
			"arguments"	=> array('cid' => null, 'imagecache' => 'full_profile_pic', 'access' => FALSE)
		),
    "collection_related_item" => array(
			"arguments"	=> array("item" => false),
			"template"	=> "templates/collections/related-item",
			"path"		=> drupal_get_path("theme", "vibio"),
    ),
	);
}

//This is a theme function to produce collection images. Currently uses collection_get_image; could completly replace
//when we can refactor the code which uses collection_get_image.-->Actually, I'm finding it useful to have separate
//functions for grabbing image src and full HTML images.
function theme_collection_image($cid, $imagecache, $access){
                        $item_image = collection_get_image($cid, false, $access);   
                        $alt = 'Collection Image';
                        $title = 'Collection Image';
                        $attributes = '';
                        return theme('imagecache', $imagecache, $item_image, $alt, $title, $attributes);
}

/**
 * @todo: Future notes: Presentation, no refactoring for now
 * @global  $user
 * @param <type> $vars
 */
function collection_preprocess_collection_view_collection(&$vars)
{
	global $user;

	$collection_html = "";
	foreach ($vars['collection_sidebar'] as $c)
	{
		$item_html = "";
		foreach($c->items as $item)
		{
			$item_html .= theme("collection_sidebar_item", $item);
		}

		$collection_html .= theme("collection_sidebar_collection", $c, $item_html);
	}

	$vars['collection_sidebar_output'] = $collection_html;

	if ($vars['collection_owner'] == $user->uid)
	{
		$add_text = t("Add Item");
		$vars['collection_owner_name'] = t("Your");
		$vars['add_item_link'] = "<a href='/product/add'>
			<div class='button_left'></div>
			<div class='button_mid'>
				<span class='form-submit'>
					$add_text
				</span>
			</div>
			<div class='button_right'></div>
			<div class='clear'></div></a>
		";
	}
	else
	{
		$owner = user_load($vars['collection_owner']);
		$vars['collection_owner_name'] = "{$owner->name}'s";
	}
}

/**
 * Preprocess for displaying a collection's information (see the header for
 * an individual collection or how the collections are displayed on the collections
 * page).
 *
 * @todo: Future notes: Presentation, no refactoring for now
 * @global <type> $base_url
 * @param <type> $vars
 * @return <type>
 */
function collection_preprocess_collection_list_item(&$vars)
{
	if(empty($vars['collection']))
		return;

	module_load_include("inc", "collection");
  
  //@todo access variable, is that ok?
	$vars['collection']->is_owner = module_exists("privacy_node") ? $vars['access'] == PRIVACY_ONLYME : true;
	$vars['collection']->image = collection_get_image($vars['collection']->nid, false, $vars['access']);
  //@todo: total_items is cached for anonymous users.
	$vars['collection']->total_items = collection_get_num_items($vars['collection']->nid, $vars['access']);
	//Add sharing buttons; requires addthis module
	$share_html = "";
	//show preview= 1 on the collections page, null on collection. We don't want to add sharing on collections page for right now.
	if(module_exists('addthis') && empty($vars['show_preview'])){
		global $base_url;
		$variables['title'] = $vars['collection']->title;
		$variables['url'] = $base_url . url('collections/'. $vars['collection']->nid);
		$variables['image'] = $vars['collection']->image;

		$share_html = theme('addthis_toolbox', $variables);
	}
/*
	if($vars['collection']->is_owner ) {
		if(module_exists("fb"))
			$share_html .= 'x'.theme("fb_share", $vars['collection']->cid, "collection");
		if(module_exists("tweetassist"))
			$share_html .= theme("tweetassist_tweet", "collection", $vars['collection']->cid);
	}

 */
	$vars['collection']->share_html = $share_html;

	$categories = collection_get_categories($vars['collection']->nid);
	if(!empty($categories)) {
		$category_text = t("Tags: !categories", array("!categories" => implode(", ", $categories)));
		$vars['collection']->collection_categories = "<span class='collection_categories'>$category_text</span>";
	}
}

/**
 * Preprocess for individual items in a collection view
 *
 * @todo: Future notes: Presentation, no refactoring for now
 * @global $user $user
 * @global  $base_url
 * @param <type> $vars
 */
function collection_preprocess_collection_list_item_preview(&$vars)
{
	global $user;
	module_load_include('inc', 'product');
	$vars['item']->image = file_uncreate_url( _vibio_item_get_image($vars['item']->nid));
        $vars['item']->image = ltrim($vars['item']->image, '/');
	$vars['item']->for_sale = $vars['item']->node_data_field_posting_type_field_posting_type_value == VIBIO_ITEM_TYPE_SELL;
	$vars['item']->node_title = strlen($vars['item']->node_title) > COLLECTION_ITEM_PREVIEW_MAX_TITLE_LENGTH ? substr($vars['item']->node_title, 0, COLLECTION_ITEM_PREVIEW_MAX_TITLE_LENGTH)."..." : $vars['item']->node_title;

/*
	$share_html = "";
	if ($vars['item']->users_uid == $user->uid) {
		if(module_exists("fb"))
			$share_html .= 'y'.theme("fb_share", $vars['item']->nid, "node", "icon");
		if(module_exists("tweetassist"))
			$share_html .= theme("tweetassist_tweet", "node", $vars['item']->nid);
	}
*/
	//Silly hack for the collections plural page to not make the small share buttons appear.
	if(!isset($vars['show_preview'])){
		//If called through AJAX, it's a preview (show_preview = TRUE)
		$ajax_request = strrpos($_SERVER["REQUEST_URI"], 'ajax');
		$vars['show_preview'] = !empty($ajax_request);
	} 
	//We don't generate the share button if the collection items are being previewed
	//on the collections page, aka show_preview isn't empty (TRUE)
	if(module_exists('addthis') && empty($vars['show_preview'])){
		global $base_url;
		$variables['url'] = $base_url . url('node/'. $vars['item']->nid);
		$variables['title'] = $vars['item']->node_title;
    $share_html = theme('addthis_button', $variables);
        }
	$vars['share_links'] = $share_html;



	/* Possession level: Have, Want, Like */
	// A hack to get it from database
	// Odd partial-loading node issue (grep this)

	// Somewhat similar to:
	// function theme_offer_button($item, $uid){
	// I'm not sure why this isn't one style (don't think it is one design)
	//  and then unite code.

	vibio_item_have_want_value_retrieval($vars['item']);
	$possess = $vars['item']->field_have_want_like[0]['value'];

	if ( $possess <= 10 ) {   // Have, including original not-set default
		if (!$vars['item']->for_sale && $vars['item']->users_uid == $user->uid)
		{
			$options = array(
				"attributes"	=> array(
					"class"	=> "offer2buy_edit_post_type",
				),
			);
			$vars['item']->offer2buy_price = l(t("Sell"), "offer2buy/ajax/edit-post-type/{$vars['item']->nid}", $options);
		}
		elseif ($vars['item']->for_sale && $vars['item']->offer2buy_price > 0)
		{
			$vars['item']->offer2buy_price =  "$".$vars['item']->offer2buy_price;
		}
		elseif ($vars['item']->for_sale)
		{
			$vars['item']->offer2buy_price = t("Best Offer");
		}
		else
		{
			$vars['item']->offer2buy_price = t("<span class='bold-text'>Status:</span> Not for Sale");
		}
		//If the offer2buy module is active... =always
		if(module_exists('offer2buy')){
			//Insert an offer button or not for sale image
			$item = $vars['item'];
			$item->offer2buy['settings']['is_on_sale'] = $vars['item']->for_sale; 
			$vars['offer_button'] = theme('offer_button', $item, $user->uid);
		}
	} else {   // Want, Like, etc
		if ( $possess == 20 ) { // Want
			$vars['item']->offer2buy_price = "Wanted";
			$vars['offer_button'] = 
				"<div class='wanted'><img src='/themes/vibio/images/item/wanted_button.png'
					alt='I want this.  Maybe it\'s my birthday today?'
					title='I want this.'></div>";
			//override for_sale, if it was set
			$vars['item']->for_sale = '';
		}
	}
}


/**
 * @todo: Future notes: Presentation, no refactoring for now
 * @param <type> $vars
 */
function collection_preprocess_page(&$vars)
{
	drupal_add_js("themes/vibio/js/collections.js");
	drupal_add_css("themes/vibio/css/collections.css");
}

/**
 * Associates vibio_items with collection nodes
 * @todo: refactor, associating vibio_items through the $item->field_collection
 *
 * @global <type> $user
 * @param <type> $node
 * @param <type> $op
 * @param <type> $a3
 * @param <type> $a4
 * @return <type>
 */
function collection_nodeapi(&$node, $op, $a3=null, $a4=null)
{
	if ($node->type != "vibio_item")
	{
		return;
	}
  //$node is a vibio_item
	global $user;
	module_load_include("inc", "collection");
	switch ($op)
	{
    //Display a message showing which collections the new vibio_item belongs to
		case "insert":
      $collection_nids = array();
      //Get the collections the item is associated with
      //field_collection is typically used by the edit item form
      if(isset($node->field_collection[0]['nid'])){
        $collection_nids = $node->field_collection;
      }
      //collection_info is used by product.pages.php; ie the have/want popups
      if(isset($node->collection_info)){
        $collection_nids = array_merge($collection_nids, $node->collection_info['cid']);
      }
			//$collection_nids = isset($node->field_collection[0]['nid']) ? $node->field_collection : false;
			if ($collection_nids)
			{
				$collection_nids = implode(",", $collection_nids);
				$sql = "SELECT `nid`, `title`
						FROM {node}
						WHERE `nid` IN ($collection_nids)";
				$res = db_query($sql);

				$collections = array();
				while ($row = db_fetch_object($res))
				{
					$collections[] = l($row->title, "collections/{$row->nid}");
				}

        //Value substitutions for item creation message
				$t_args = array(
					"!item" 		=> l($node->title, "node/{$node->nid}"),
					"!collections"	=> implode(", ", $collections),
				);
          
        //Display message
				$message = count($collections) > 1 ?
					t("!item has been created and added to the following collections: !collections", $t_args) :
					t("!item has been created and added to your !collections collection", $t_args);

				drupal_set_message($message);
        module_invoke_all('collection_insert', $node->uid, $node->nid);
			}
    //
		case "update":
      $collection_nids = array();
      //Consolidate all collection nids into field_collection
      //@todo: eliminate collection_info
      if($node->collection_info){
        foreach($node->collection_info['cid'] as $cid){
          $node->field_collection = array();
          $node->field_collection[]['nid'] = $cid;
        }
        //Make sure there are no duplicate values in field_collection
        $node->field_collection = array_unique($node->field_collection);
      }

      //Create a list of new collection_nids to be added
      if(isset($node->field_collection[0]['nid'])){
        foreach($node->field_collection as $collection_record){
          $collection_nids[] = $collection_record['nid'];
        }
      }elseif($node->collection_info){
        //This case is legacy, @todo remove
        foreach($node->collection_info['cid'] as $cid){
          $collection_nids[] =  $cid;
        }
      }else{
        //If no collection nids set, get the already set values
        $collection_nids = collection_get_item_cid($node->nid);
      }
      unset($node->collection_info);
      unset($node->field_collection);

      $old_cids = $op == "update" ? collection_get_item_cid($node->nid) : array();

      //Insert the new collection ids in, deleting the old
			foreach (array_diff($collection_nids, $old_cids) as $cid)
			{
        $node->field_collection[]['nid'] = $cid;
			}

      //Defines hook collection_update
      //@todo: check if there are any implementations that might interfere
			module_invoke_all("collection_update", $user->uid, array_unique(array_merge($collection_nids, $old_cids)));
			break;
		case "delete":
			$cid = collection_get_item_cid($node->nid);
			$sql = "DELETE FROM {content_field_collection}
					WHERE `nid`=%d";
			db_query($sql, $node->nid);

      //Defines hook collection_delete_item
      //@todo: check if there are any implementations that might interfere
			module_invoke_all("collection_delete_item", $user->uid, $cid, $node->nid);
			break;
	}
}

/**
 *
 * @return <type>
 */
function collection_views_api()
{
	return array(
		"api"	=> 2,
	);
}

/**
 *
 * @param <type> $form
 * @param <type> $state
 * @return <type> 
 */
function collection_form_product_node_form_alter(&$form, &$state)
{
	if (module_exists("product") && !product_get_autoadd(false))
	{
		return;
	}

	if (!$form['#node']->nid) // only on new product nodes
	{
		collection_form_vibio_item_node_form_alter(&$form, &$state);
	}
}

/**
 * Adds a collections form to when adding a new product (implies item creation).
 *
 * @todo: delete function in a later refactoring
 * @param <type> $form
 * @param <type> $state 
**/
function collection_form_vibio_item_node_form_alter(&$form, &$state)
{
	module_load_include("inc", "collection");
  $options = collection_options();
	//If there aren't any collections
	if (!$form['#node']->nid && 
			(count($options) < 1 )) {
		$default = collection_get_user_default(false, true);
		// collection_options seems to cache, so force it.  This is repeat
		//  code with collection_get_user_default which I expect will be gone
		//  in two weeks.
    $options = array();
		$options[$default] = 'Unsorted';
	}elseif(!$form['#node']->nid){
    //else grab the collection options
		$default = collection_get_user_default(false, true);
	}
	
	if ($form['#node']->nid) //existing node
	{
		$default = collection_get_item_cid($form['#node']->nid);
	} 


	// Add the collection_info field to this form
	$form['collection_info'] = array(
		"#title"		=> t("Add this item to your Collection(s)"),
		"#description"	=> t("You can add your item to multiple Collections by holding down the 'Command' or 'Ctrl' key."), //:" . '<p><strong><a href="/collections/new?automodalReload=true" class="automodal">* Add new collection</a></strong>'),

		"#type"			=> "fieldset",
		"#collapsible"	=> true,
		"#collapsed"	=> false,
		"#tree"			=> true,
		"cid"			=> array(
			"#type"			=> "select",
			"#required"		=> true,
			"#title"		=> t("Collection"),
			"#options"		=> $options, //collection_options(),
			"#default_value"=> $default,
			//"#multiple"		=> true,
		),

		/* this was commented out, why?
			 --> doesn't seem to do anything at all
		"new_collection"=> array(
			"#type"			=> "textfield",
			"#title"		=> t("New Collection"),
			"#description"	=> t("Enter a name for this collection"),
		),
		*/
	);

}

/**
 *
 * @global $user $user
 * @param <type> $form_vals
 * @return <type>
 */
function collection_product_inventory_quick_add($form_vals)
{
	global $user;

	module_load_include("inc", "collection");

	if ($form_vals['collection_info']['cid'] || !($default = collection_get_user_default($user->uid, true)))
	{
		return array();
	}else{
    return array(
      "collection_info"	=> array(
        "cid"	=> array($default => $default),
      ),
    );
  }
}

function collection_offer2buy_complete_actions($old_uid, $node)
{
	module_load_include("inc", "collection");
	$old_cid = collection_get_item_cid($node->nid);

	if (!($new_cid = collection_get_user_default($node->uid)))
	{
		$new_cid = collection_get_user_default($node->uid, true); //this will handle clearing the views caches for us...
	}
	else
	{
		module_invoke_all("collection_update", $node->uid, array($new_cid));
	}
  
	$sql = "DELETE FROM {content_field_collection}
			WHERE `nid`=%d";
	db_query($sql, $node->nid);

  $node->field_collection[]['nid'] = $new_cid;
  node_save($node);

	module_invoke_all("collection_update", $old_uid, $old_cid);
}

function collection_form_views_exposed_form_alter(&$form, &$state)
{

	if ($form['#id'] == "views-exposed-form-user-collection-default") {
		$form['collection_order_by'] = array(
			"#type"		=> "select",
			"#title"	=> t("Sort"),
			"#weight"	=> 9,
			"#options"	=> array(
				"node_changed-desc"	=> t("Newest First"),
				"node_changed-asc"	=> t("Oldest First"),
			),
		);
		$form['order'] = array(
			"#type" => "hidden",
			"#value"=> isset($_GET['order']) ? $_GET['order'] : "node_changed",
		);
		$form['sort'] = array(
			"#type" => "hidden",
			"#value"=> isset($_GET['sort']) ? $_GET['sort'] : "node_changed",
		);

		$form['submit']['#weight'] = 10;
	}
	elseif (in_array($form['#id'], array("views-exposed-form-user-collections-default", "views-exposed-form-user-inventory-default")))
	{
		$label = t("View");
		$uid = $form['#parameters'][1]['view']->args[0];
		$collection = t("Collections");
		$all_items = t("All Items");
		$collection_default = $form['#id'] == "views-exposed-form-user-collections-default" ? "selected='selected'" : "";
		$items_default = $form['#id'] == "views-exposed-form-user-inventory-default" ? "selected='selected'" : "";

		/* $form['#suffix'] = "
			<div class='inventory_view_type'>
				<span>$label</span>
				<select class='inventory_view_type_select'>
					<option value='/user/{$uid}/inventory' $collection_default>$collection</option>
					<option value='/collections/{$uid}/view-all' $items_default>$all_items</option>
				</select>
			</div>
			<div class='clear'></div>
		";*/
	}
}

/**
 * Returns the number of collections an external viewer is allowed to see
 * according to the privacy settings?
 * 
 * @param <type> $uid
 * @return <type>
 */
function collection_profile_ext_public_info($uid)
{
	module_load_include("inc", "collection");
	$collections = collection_get_collections($uid);
	$access = privacy_get_access_level($uid);

	foreach ($collections as $cid => $c)
	{
		if ($c->privacy_setting > $access)
		{
			unset($collections[$cid]);
		}
	}

	return array(array(
		"weight"=> 0,
		"title"	=> t("Collections"),
		"data"	=> count($collections),
	));
}

/**
 * Check on user login to see if the user has created 100 collections in 6 months,
 * award badge if they have.
 * 
 * @param <type> $uid
 * @return <type>
 */
function collection_badge_user_login($uid) {
	if (!($badge = badge_load_special("100_collections_6_months")) || badge_user_has_badge($badge->bid, $uid)) {
		return false;
	}

	$sql = "SELECT COUNT(*)
			FROM {node}
			WHERE `uid`=%d AND `type`='collection'";
	$total_collections = db_result(db_query($sql, $uid));

	if ($total_collections >= 100) {
		badge_give_badge($badge->bid, $uid);
	}
}

// warning: stephen cut and pasted some code, and found $cid being passed
//  here was an array.  Is this happening elsewhere?  It oddly works if
//  you comment out the the is_numeric test... $cid = array(26=>26) behaves
//  like $cid = 26
function collection_load($cid)
{
	if (!is_numeric($cid))
	{
		return false;
	}


  $collection = node_load($cid);

  //For legacy purposes, @todo delete
  $collection->description = $collection->body;
  $collection->user_name = $collection->name;

  //Add further data to the collection object
	$collection = (object) array_merge((array) $collection, (array) module_invoke_all("collection_load", $collection, $as_uid)); // stephen notes: $as_uid, what is it, where from?
	return $collection;
}

function collection_access_collection($collection)
{
	global $user;

	if ($user->uid == $collection->uid)
	{
		return true;
	}
	elseif (isset($collection->privacy_setting) && module_exists("privacy_node"))
	{
		return privacy_get_access_level($collection->uid) >= $collection->privacy_setting && user_access("collections viewer");
	}
	else
	{
		return user_access("collections user");
	}
}

function collection_manage_collection_access($collection)
{
	global $user;
  //If $collection is an nid...
	if (is_numeric($collection))
	{
    //...grab the author's uid
		$sql = "SELECT `uid`
				FROM {node}
				WHERE `nid`=%d";
		$collection = db_fetch_object(db_query($sql, $collection));
	}

	return $user->uid == $collection->uid;
}

function collection_title($collection)
{
	return $collection->title;
}

?>
