<?php
define("COLLECTION_DESCRIPTION_MAX_LENGTH", 65535);
define("COLLECTION_TITLE_MAX_LENGTH", 255);

function collection_perm()
{
	return array(
		"collections user",
	);
}

function collection_menu()
{
	return array(
		"collections/manage"		=> array(
			"title"				=> "Manage Your Collections",
			"page callback"		=> "collection_manage",
			"access arguments"	=> array("collections user"),
			"file"				=> "collection.pages.inc",
			"type"				=> MENU_SUGGESTED_ITEM,
		),
		"collections/manage/%collection"	=> array(
			"title callback"	=> "collection_title",
			"title arguments"	=> array(2),
			"page callback"		=> "drupal_get_form",
			"page arguments"	=> array("collection_edit", 2),
			"access callback"	=> "collection_manage_collection_access",
			"access arguments"	=> array(2),
			"file"				=> "collection.pages.inc",
			"type"				=> MENU_CALLBACK,
		),
		"collections/new"		=> array(
			"title"				=> "New Collection",
			"page callback"		=> "drupal_get_form",
			"page arguments"	=> array("collection_edit"),
			"access arguments"	=> array("collections user"),
			"file"				=> "collection.pages.inc",
			"type"				=> MENU_CALLBACK,
		),
		"collections/%collection"	=> array(
			"title callback"	=> "collection_title",
			"title arguments"	=> array(1),
			"page callback"		=> "collection_view_collection",
			"page arguments"	=> array(1),
			"access callback"	=> "collection_access_collection",
			"access arguments"	=> array(1),
			"file"				=> "collection.pages.inc",
			"type"				=> MENU_CALLBACK,
		),
	);
}

function collection_theme(&$existing)
{
	return array(
		"collection_list_item" => array(
			"arguments"	=> array("collection" => array(), "viewer_uid" => false),
			"template"	=> "templates/collections/collection",
			"path"		=> drupal_get_path("theme", "vibio"),
		),
	);
}

function collection_preprocess_collection_list_item(&$vars)
{
	if (empty($vars['collection']))
	{
		return;
	}
	
	module_load_include("inc", "collection");
	$vars['collection']->is_owner = $vars['collection']->collection_uid == $vars['viewer_uid'];
	$vars['collection']->image = collection_get_image($vars['collection']->cid);
}

function collection_nodeapi(&$node, $op, $a3=null, $a4=null)
{
	if ($node->type != "vibio_item")
	{
		return;
	}
	
	global $user;
	module_load_include("inc", "collection");
	
	switch ($op)
	{
		case "insert":
		case "update":
			$cids = isset($node->collection_info) ? $node->collection_info['cid'] : collection_get_item_cid($node->nid);
			unset($node->collection_info);
			
			$old_cids = $op == "update" ? collection_get_item_cid($node->nid) : array();
			$delete_cids = array_diff($old_cids, $cids);
			if (!empty($delete_cids))
			{
				$delete_cids = implode(",", $delete_cids);
				$sql = "DELETE FROM {collection_items}
						WHERE `item_nid`=%d
							AND `cid` IN ($delete_cids)";
				db_query($sql, $node->nid);
			}
			
			$sql = "INSERT INTO {collection_items}
					(`cid`, `item_nid`) VALUES";
			$vals = array();
			$args = array();
			foreach (array_diff($cids, $old_cids) as $cid)
			{
				$vals[] = "(%d, %d)";
				$args[] = $cid;
				$args[] = $node->nid;
			}
			
			if (!empty($vals))
			{
				$sql .= implode(",", $vals);
				db_query($sql, $args);
			}
			
			module_invoke_all("collection_update", $user->uid, array_unique(array_merge($cids, $old_cids)));
			break;
		case "delete":
			$cid = collection_get_item_cid($node->nid);
			$sql = "DELETE FROM {collection_items}
					WHERE `item_nid`=%d";
			db_query($sql, $node->nid);
			module_invoke_all("collection_delete_item", $user->uid, $cid, $node->nid);
			break;
	}
}

function collection_views_api()
{
	return array(
		"api"	=> 2,
	);
}

function collection_form_vibio_item_node_form_alter(&$form, &$state)
{
	module_load_include("inc", "collection");
	
	if ($form['#node']->nid) //existing node
	{
		$default = collection_get_item_cid($form['#node']->nid);
	}
	
	$form['collection_info'] = array(
		"#title"		=> t("Collection"),
		"#description"	=> "Some help text.",
		"#type"			=> "fieldset",
		"#collapsible"	=> true,
		"#collapsed"	=> false,
		"#tree"			=> true,
		"cid"			=> array(
			"#type"			=> "select",
			"#required"		=> true,
			"#title"		=> t("Collection"),
			"#options"		=> collection_options(),
			"#default_value"=> $default,
			"#multiple"		=> true,
		),
		/*"new_collection"=> array(
			"#type"			=> "textfield",
			"#title"		=> t("New Collection"),
			"#description"	=> t("Enter a name for this collection"),
		),*/
	);
}

function collection_product_inventory_quick_add($form_vals)
{
	global $user;
	
	module_load_include("inc", "collection");
	
	if (!$default = collection_get_user_default($user->uid, true))
	{
		return false;
	}
	
	return array(
		"collection_info"	=> array(
			"cid"	=> array($default => $default),
		),
	);
}

function collection_offer2buy_complete_actions($old_uid, $node)
{
	module_load_include("inc", "collection");
	$old_cid = collection_get_item_cid($node->nid);
	
	if (!($new_cid = collection_get_user_default($node->uid)))
	{
		$new_cid = collection_get_user_default($node->uid, true); //this will handle clearing the views caches for us...
	}
	else
	{
		module_invoke_all("collection_update", $node->uid, array($new_cid));
	}
	
	$sql = "DELETE FROM {collection_items}
			WHERE `item_nid`=%d";
	db_query($sql, $node->nid);
	
	$sql = "INSERT INTO {collection_items}
			(`cid`, `item_nid`) VALUES
			(%d, %d)";
	db_query($sql, $new_cid, $node->nid);
	
	module_invoke_all("collection_update", $old_uid, $old_cid);
}

function collection_load($cid)
{
	if (!is_numeric($cid))
	{
		return false;
	}
	
	$sql = "SELECT *
			FROM {collection}
			WHERE `cid`=%d";
	$collection = db_fetch_array(db_query($sql, $cid));
	$collection = array_merge($collection, module_invoke_all("collection_load", $collection, $as_uid));
	
	return $collection;
}

function collection_access_collection($collection)
{
	if (isset($collection['privacy']) && module_exists("privacy"))
	{
		return privacy_get_access_level($collection['uid']) >= $collection['privacy'] && user_access("collections user");
	}
	else
	{
		return user_access("collections user");
	}
}

function collection_manage_collection_access($collection)
{
	global $user;
	
	return $user->uid == $collection['uid'];
}

function collection_title($collection)
{
	return $collection['title'];
}
?>